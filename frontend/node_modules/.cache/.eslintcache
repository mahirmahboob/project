[{"/Users/mahirmahboob/Desktop/nodejs/frontend/src/index.js":"1","/Users/mahirmahboob/Desktop/nodejs/frontend/src/App.js":"2","/Users/mahirmahboob/Desktop/nodejs/frontend/src/reportWebVitals.js":"3","/Users/mahirmahboob/Desktop/nodejs/frontend/src/Notfound.js":"4","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/homepage/homepage.js":"5","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/Signup.js":"6","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/navbar/navbar.js":"7","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/quiz/quiz.js":"8","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/searchPage/searchPage.js":"9","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/Login.js":"10","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/surpriseMe/surpriseMe.js":"11","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/genre/genre.js":"12","/Users/mahirmahboob/Desktop/nodejs/frontend/src/testData/data.js":"13","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/tobereadlistings.js":"14","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/deletetobereadentry.js":"15","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/addtobereadentry.js":"16","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/searchbar.js":"17","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/forgot.js":"18","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/forgotusername.js":"19","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/dashboard.js":"20","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/toberead.js":"21","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/AboutUs/aboutus.js":"22","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/AboutUs/card.js":"23","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/AboutUs/data.js":"24","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/commentsOld.js":"25","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/userbookhistory.js":"26","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/gethistorytable.js":"27","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/tobedeletefromhistory.js":"28","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/deletesomethingfromhistory.js":"29","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/blogmain.js":"30","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/posts/posts.js":"31","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/posts/PostEntries.js":"32","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/Comments/comments.js":"33","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/Comments/CommentEntries.js":"34","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/Comments/PostComment.js":"35","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/footer.js":"36","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/posts/AddEntry.js":"37","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/NYTbooks/nytbooks.js":"38","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/NYTbooks/FlipCard.js":"39"},{"size":594,"mtime":1635555988000,"results":"40","hashOfConfig":"41"},{"size":3115,"mtime":1639334802140,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":1632672688523,"results":"43","hashOfConfig":"41"},{"size":346,"mtime":1632672688518,"results":"44","hashOfConfig":"41"},{"size":7315,"mtime":1639334641000,"results":"45","hashOfConfig":"41"},{"size":7300,"mtime":1639334641000,"results":"46","hashOfConfig":"41"},{"size":2425,"mtime":1639334641000,"results":"47","hashOfConfig":"41"},{"size":37719,"mtime":1639334641000,"results":"48","hashOfConfig":"41"},{"size":6586,"mtime":1639334641000,"results":"49","hashOfConfig":"41"},{"size":4579,"mtime":1639181616865,"results":"50","hashOfConfig":"41"},{"size":4500,"mtime":1639334641000,"results":"51","hashOfConfig":"41"},{"size":4127,"mtime":1639334641000,"results":"52","hashOfConfig":"41"},{"size":3593,"mtime":1635017440379,"results":"53","hashOfConfig":"41"},{"size":1311,"mtime":1639334641000,"results":"54","hashOfConfig":"41"},{"size":1197,"mtime":1639334641000,"results":"55","hashOfConfig":"41"},{"size":2304,"mtime":1639334641000,"results":"56","hashOfConfig":"41"},{"size":2074,"mtime":1639334641000,"results":"57","hashOfConfig":"41"},{"size":5525,"mtime":1639025336095,"results":"58","hashOfConfig":"41"},{"size":4003,"mtime":1639025303192,"results":"59","hashOfConfig":"41"},{"size":6334,"mtime":1639334641000,"results":"60","hashOfConfig":"41"},{"size":3088,"mtime":1639334641000,"results":"61","hashOfConfig":"41"},{"size":3606,"mtime":1639334641000,"results":"62","hashOfConfig":"41"},{"size":201,"mtime":1639334641000,"results":"63","hashOfConfig":"41"},{"size":3109,"mtime":1639334641000,"results":"64","hashOfConfig":"41"},{"size":881,"mtime":1636823500232,"results":"65","hashOfConfig":"41"},{"size":1311,"mtime":1639334641000,"results":"66","hashOfConfig":"41"},{"size":2908,"mtime":1639334641000,"results":"67","hashOfConfig":"41"},{"size":998,"mtime":1639334641000,"results":"68","hashOfConfig":"41"},{"size":1055,"mtime":1639334641000,"results":"69","hashOfConfig":"41"},{"size":7794,"mtime":1639334641000,"results":"70","hashOfConfig":"41"},{"size":752,"mtime":1639334641000,"results":"71","hashOfConfig":"41"},{"size":2093,"mtime":1639334641000,"results":"72","hashOfConfig":"41"},{"size":642,"mtime":1639334641000,"results":"73","hashOfConfig":"41"},{"size":1216,"mtime":1639334641000,"results":"74","hashOfConfig":"41"},{"size":2876,"mtime":1639334641000,"results":"75","hashOfConfig":"41"},{"size":2893,"mtime":1639174927769,"results":"76","hashOfConfig":"41"},{"size":5880,"mtime":1639334641000,"results":"77","hashOfConfig":"41"},{"size":1113,"mtime":1639334641000,"results":"78","hashOfConfig":"41"},{"size":888,"mtime":1639334641000,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1ueyz9t",{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mahirmahboob/Desktop/nodejs/frontend/src/index.js",[],["181","182"],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/App.js",["183","184"],"import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar/navbar\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport Notfound from \"./Notfound\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Homepage from \"./components/homepage/homepage\";\nimport { SearchPage } from \"./components/searchPage/searchPage\";\nimport GenreRecs from \"./components/genre/genre\";\nimport QuizRecs from \"./components/quiz/quiz\";\nimport SurpriseMeRecs from \"./components/surpriseMe/surpriseMe\";\nimport dashboard from \"./components/dashboard/dashboard\";\nimport forgot from \"./components/forgot\";\nimport forgotusername from \"./components/forgotusername\";\nimport blog from \"./components/blog/blogmain\";\nimport AboutUs from \"./components/AboutUs/aboutus.js\";\nimport { PropTypes } from 'react'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  componentDidMount(){\n    const userfromstorage=localStorage.getItem(\"current_user\");\n    if(userfromstorage){\n      this.setState({\n        isLoggedIn:true\n      })\n    }\n  }\n\n  handleLogin() {\n    console.log(\"in handle login:  \");\n    this.setState({\n      isLoggedIn: true,\n    });\n  }\n\n\n  logout=() =>{\n    this.setState({\n      isLoggedIn: false,\n    });\n    localStorage.removeItem(\"current_user\");\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <div className=\"App\">\n          <Navbar isLoggedIn={this.state.isLoggedIn} logout={this.logout}/>\n            <div> \n              <Route\n                exact\n                path=\"/\"\n                render={(props) => (\n                  <Login\n                    {...props}\n                    isLoggedIn={this.state.isLoggedIn}\n                    handleLogin={this.handleLogin}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path={\"/signup\"}\n                render={(props) => (\n                  <Signup\n                    {...props}\n                    isLoggedIn={this.state.isLoggedIn}\n                    handleLogin={this.handleLogin}\n                  />\n                )}\n              />\n              <Route path=\"/home\" component={Homepage} />\n              <Route path=\"/searchdir\" component={SearchPage} />\n              <Route path=\"/recGenre\" component={GenreRecs} />\n              <Route path=\"/recQuiz\" component={QuizRecs} />\n              <Route path=\"/recSurpriseMe\" component={SurpriseMeRecs} />\n              <Route path=\"/dashboard\" component={dashboard} />\n              <Route path=\"/forgot\" component={forgot} />\n              <Route path=\"/forgotusername\" component={forgotusername} />\n              <Route path=\"/blog\" component={blog} />\n              <Route path=\"/AboutUs\" component={AboutUs} />\n              \n\n              {/* <Route component={Notfound} /> */}\n            </div>\n          </div>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/reportWebVitals.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/Notfound.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/homepage/homepage.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/Signup.js",["185","186","187","188","189","190","191"],"import React, { Component } from \"react\";\nimport { Footer } from \"./footer\";\n\n\n\n// const url = '/rest/signup'\nconst appStyle = {\n    height: '250px',\n    display: 'flex'\n};\n\nconst formStyle = {\n    margin: 'auto',\n    padding: '10px',\n    borderRadius: '5px',\n    background: '#ebd0b9',\n    width: '400px',\n    display: 'block'\n};\n\nconst labelStyle = {\n    margin: '10px 0 5px 0',\n    fontFamily: 'Arial, Helvetica, sans-serif',\n    fontSize: '15px',\n};\n\nconst inputStyle = {\n    margin: '5px 0 10px 0',\n    padding: '0px', \n    border: '1px solid #bfbfbf',\n    borderRadius: '0px',\n    boxSizing: 'border-box',\n    width: '100%'\n};\n\nconst submitStyle = {\n    margin: '10px 0 0 0',\n    padding: '7px 7px',\n    border: '1px solid #efffff',\n    borderRadius: '3px',\n    background: '#aaa',\n    width: '100%', \n    fontSize: '15px',\n    color: 'white',\n    display: 'block'\n};\nclass Signup extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            Confirmpassword: \"\",\n            favoriteTeacher: \"\",\n            account: {},\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmitSignup = (e) => {\n        e.preventDefault();\n\n        fetch('/rest/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password,\n                Confirmpassword: this.state.Confirmpassword,\n                favoriteTeacher: this.state.favoriteTeacher,\n                email: this.state.email,\n    })\n        }).then(response => {\n            if (response.status === 404) {\n                alert(\"That username already exist, please update your username\");\n            }\n            else if (response.status ===406)\n            {\n                alert(\"Your Password and Confirm Password does not match\");\n            }\n             else if (response.status ===498)\n            {\n                alert(\"Email already exist, please select a different Email Id\");\n            }\n            else if (response.status === 400)\n            {\n                alert(\"Password and Confirm Password can not be empty\");\n            }\n\n            else if (response.status ===416)\n            {\n                alert(\"Username and Password can not be less than seven character long\");\n            }\n\n            else if (response.status ===409)\n            {\n                alert(\"Favorite Teacher has to be atleast four character long\");\n            }\n\n         else if (response.status ===417)\n            {\n                alert(\"Email field can not be empty and it has to be atleast 7 characters long\");\n            }\n\n            else if (response.status === 201) {\n            alert(\"Succesfully Signup Up!\");\n            \n            window.location.href =  'http://localhost:3000';\n            \n\n            }\n            })\n            .catch(function(error) {\n            \n                console.log('Request failed', error)\n            });\n    } \n\n    render() {\n        const username = this.state.username;\n        const password = this.state.password;\n        const Confirmpassword = this.state.Confirmpassword;\n        const favoriteTeacher = this.state.favoriteTeacher;\n        const email = this.state.email;\n     return (  \n        <div style={{padding: 10}}>\n            <div style={appStyle}>\n                <div style={formStyle}>\n                    <b>Create an Account</b>\n                    <br/>\n                    <b>Join our community</b>\n                    <br/>\n                    <br/>\n                    <form onSubmit={this.handleSubmitSignup}>\n                        <table border=\"0\">\n                            <tbody>\n                                \n                                <tr>\n                                    <td>Username:</td>\n                                    <td>\n                                        <input type=\"username\" name=\"username\" size=\"20\" autocorrect=\"off\" spellcheck=\"false\"\n                                            autocapitalize=\"off\" value={this.state.username} onChange={this.handleChange}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Email:</td>\n                                    <td>\n                                        <input type=\"Email\" name=\"email\" size=\"20\" autocorrect=\"off\" spellcheck=\"false\"\n                                            autocapitalize=\"off\" value={this.state.email} onChange={this.handleChange}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Password:</td>\n                                    <td>\n                                        <input type=\"password\" name=\"password\" size=\"20\"\n                                            required value={this.state.password} onChange={this.handleChange}/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Confirm Password:</td>\n                                    <td>\n                                        <input type=\"password\" name=\"Confirmpassword\" size=\"20\"\n                                            required value={this.state.Confirmpassword} onChange={this.handleChange}/>\n                                    </td>\n                                </tr>\n                                                                <tr>\n                                    <td>Who is your Favorite Teacher:</td>\n                                    <td>\n                                        <input type=\"text\" name=\"favoriteTeacher\" size=\"20\"\n                                            required value={this.state.favoriteTeacher} onChange={this.handleChange}/>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <br/>\n                        <input style={submitStyle} type=\"submit\" value=\"Submit\"/>\n                        <div>\n                        Already have an account? \n                            <a href=\"/\"> Log in Here!</a>\n                        </div>\n                    </form>\n                </div>\n            </div>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <Footer/>\n        </div>\n        );\n    }\n}\n\nexport default Signup;\n\n// import React, { Component } from \"react\";\n\n// // const url = '/rest/login'\n\n// class Signup extends Component {\n//     constructor() {\n//         super();\n//         this.state = {\n           \n//         }\n//     }\n    \n\n//     render() {\n     \n//      return (  \n//         <div>\n//          Signup\n//         </div>\n//     );\n//     }\n// }\n\n// export default Signup;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/navbar/navbar.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/quiz/quiz.js",["192","193"],"import React from 'react';\n//import { render } from 'react-dom';\nimport './TakeQuiz.css';\nconst url = \"http://localhost:5000/takeaquiz\";\n\n    \nclass TakeQuiz extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n        loading:true,\n        book: null,\n        recs: new Map()\n\n        };\n    };\n\n    componentDidMount(){\n      const hid = [\"timetravel\",\"tech\",\"apocalyptic\",\"AU\",\"alien\",\"realistic\",\"sciencefiction\",\"dystopian\",\"fantasy\",\"romance\",\"historicfiction\",\"mystery\",\"adventure\",\"horror\",\"folk\",\"witch\"];\n      for (let x in hid) {\n        let hidden = document.getElementById(hid[x])\n        hidden.style.display = \"none\";\n      }\n    }\n  render(){\n    const genres = (element,genre)=>{\n      element.style.display = \"none\";\n      genre.style.display = \"inline\";\n    }\n    const submit = ()=>{\n      //console.log(this.state.recs)\n      let obj = Object.create(null);\n      for (let [k,v] of this.state.recs) {\n        obj[k] = v;\n      }\n      const str = JSON.stringify(obj)\n\n      fetch(url, {\n          method: \"POST\",\n          headers: {\n              'Content-type': 'application/json',\n              'Accept': 'application/json'\n          },\n          body: str\n      }).then(result =>result.json())\n          .then(data => {\n              this.setState({\n                     book: data[0], \n                     loading: false,\n                })\n              //{printfunction()}\n          }) \n    }\n    const back = (del,hide,show)=>{\n      // console.log(\"hide\",hide)\n      // console.log(\"show\",show)\n      let hidden = document.getElementById(hide)\n      let shown = document.getElementById(show)\n\n      hidden.style.display = \"none\";\n      shown.style.display = \"inline\";\n      console.log(this.state.recs)\n      if (del.length){\n        for (let x in del) {\n          if (this.state.recs.has(del[x])){          \n            this.state.recs.delete(del[x])\n          }\n        }\n        console.log(this.state.recs)\n      }\n    }\n    const check = (tag,selectedOptions) =>{\n      if (selectedOptions === 'skip'){\n        if (this.state.recs.has(tag)){          \n          this.state.recs.delete(tag)\n        }\n      }\n      else{ \n          this.state.recs.set(tag,selectedOptions)\n      }    \n      if (tag === \"genre\"){\n        if (this.state.recs.get(tag) === 'realistic'|| this.state.recs.get(tag) === 'sciencefiction' || this.state.recs.get(tag) === 'fantasy'){\n          let elem = document.getElementById('hide1')\n          let gen = document.getElementById(this.state.recs.get(tag))\n          genres(elem,gen)\n        }\n      if (this.state.recs.get(tag) === 'romance'|| this.state.recs.get(tag) === 'historicfiction' || this.state.recs.get(tag) === 'mystery'||this.state.recs.get(tag) === 'adventure'){\n        let elem = document.getElementById(\"realistic\")\n        let gen = document.getElementById(this.state.recs.get(tag))\n        genres(elem,gen)\n      }\n    }         \n     if (tag === \"subgenre\"){\n     if (this.state.recs.get(tag) === 'alien'|| this.state.recs.get(tag) === 'AU' || this.state.recs.get(tag) === 'dystopian' || this.state.recs.get(tag) === 'apocalyptic'|| this.state.recs.get(tag) === 'tech'|| this.state.recs.get(tag) === 'timetravel'){\n        let elem = document.getElementById('sciencefiction')\n        let gen = document.getElementById(this.state.recs.get(tag))\n        genres(elem,gen)\n      }\n     if (this.state.recs.get(tag) === 'horror'|| this.state.recs.get(tag) === 'folk' || this.state.recs.get(tag) === 'witch'){\n        let elem = document.getElementById('fantasy')\n        let gen = document.getElementById(this.state.recs.get(tag))\n        genres(elem,gen)\n      }\n    }\n    console.log(this.state.recs)\n  }\n    return(\n        <body>\n        {/* <div> */}\n        <div id=\"hide1\">\n          <p> Rating?</p>\n          <button onClick={() => check(\"age_range\",\"c\")}>children</button><br/>\n          <button onClick={() => check(\"age_range\",\"t\")}>teens</button><br/>\n          <button onClick={() => check(\"age_range\",\"a\")}>adult</button><br/>\n          <button onClick={() => check(\"age_range\",\"all\")}>all</button><br/>\n          <p>Length?</p>\n          <button onClick={() => check(\"maximum_pages\",\"short\")}>short Read (0-200)</button><br/>\n          <button onClick={() => check(\"maximum_pages\",\"long\")}>long Read (200+)</button><br/>\n          <p>Publication Era?</p>\n          <button onClick={() => check(\"publication_date\",\"bce\")}>ancient (bce)</button><br/>\n          <button onClick={() => check(\"publication_date\",\"middle ages\")}>middle ages (6th-16th ce)</button><br/>\n          <button onClick={() => check(\"publication_date\",\"renaissance\")}>renaissance (16th-17th ce)</button><br/>\n          <button onClick={() => check(\"publication_date\",\"early modern\")}>early modern (18th-19th ce)</button><br/>\n          <button onClick={() => check(\"publication_date\",\"contemporary\")}>contemporary (20th-21st ce)</button><br/>\n          <p>Trigger Warnings?</p>\n          <button onClick={() => check(\"triggers\",\"violence\")}>violence</button><br/>\n          <button onClick={() => check(\"triggers\",\"death\")}>death</button><br/>\n          <button onClick={() => check(\"triggers\",\"suicide\")}>suicide</button><br/>\n          <button onClick={() => check(\"triggers\",\"drug abuse\")}>drug abuse</button><br/>\n          <button onClick={() => check(\"triggers\",\"child abuse\")}>child abuse</button><br/>\n          <button onClick={() => check(\"triggers\",\"SA\")}>sexual assault/rape</button><br/>\n          <button onClick={() => check(\"triggers\",\"kidnapping\")}>kidnapping</button><br/>\n          <button onClick={() => check(\"triggers\",\"animal cruelty\")}>animal cruelty</button><br/>\n          <button class=\"skipped\"  onClick={() => check(\"triggers\",\"skip\")}>skip</button><br/>\n          <p>Genre of fiction?</p>\n          <button onClick={() => check(\"genre\",\"realistic\")}>realistic</button><br/>\n          <button onClick={() => check(\"genre\",\"sciencefiction\")}>science fiction</button><br/>\n          <button onClick={() => check(\"genre\",\"fantasy\")}>fantasy</button><br/>\n        </div>\n\n        <div id=\"realistic\">\n          <p>Genre of realistic fiction?</p>\n          <button class=\"rom\" onClick={() => check(\"genre\",\"romance\")}>romance</button><br/>\n          <button class=\"his\" onClick={() => check(\"genre\",\"historicfiction\")}>historic fiction</button><br/>\n          <button class=\"mys\" onClick={() => check(\"genre\",\"mystery\")}>mystery</button><br/>\n          <button class=\"adv\" onClick={() => check(\"genre\",\"adventure\")}>survival/adventure</button><br/>\n          <button class=\"skipped\" onClick={() => back([],\"realistic\",\"hide1\")}>back</button>\n        </div>\n        <div id=\"sciencefiction\">\n          <p>Category of scifi?</p>\n          <button class=\"ali\" onClick={() => check(\"subgenre\",\"alien\")}>extraterrestrial life/space exploration</button><br/>\n          <button class=\"dys\" onClick={() => check(\"subgenre\",\"dystopian\")}>dystopian</button><br/>\n          <button class=\"par\" onClick={() => check(\"subgenre\",\"AU\")}>AU/ParallelU</button><br/>\n          <button class=\"apo\" onClick={() => check(\"subgenre\",\"apocalyptic\")}>apocalyptic/post-apocalyptic</button><br/>\n          <button class=\"tex\" onClick={() => check(\"subgenre\",\"tech\")}>anything techy</button><br/>\n          <button class=\"tim\" onClick={() => check(\"subgenre\",\"timetravel\")}>time travel</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"subgenre\"],\"sciencefiction\",\"hide1\")}>back</button><br/>\n        </div>\n        <div id=\"fantasy\">\n          <p>Genre of fantasy?</p>\n          <button class=\"hor\" onClick={() => check(\"subgenre\",\"horror\")}>horror</button><br/>\n          <button class=\"fok\" onClick={() => check(\"subgenre\",\"folk\")}>folklore</button><br/>\n          <button class=\"wit\" onClick={() => check(\"subgenre\",\"witch\")}>witch/wizard</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"subgenre\"],\"fantasy\",\"hide1\")}>back</button>\n        </div>\n\n        <div id = \"horror\">\n          <p>The scary thing?</p>\n          <button onClick={() => check(\"element\",\"occult\")}>demonic/occult</button><br/>\n          <button onClick={() => check(\"element\",\"ghost\")}>ghost</button><br/>\n          <button onClick={() => check(\"element\",\"lovecraft\")}>lovecraftian</button><br/>\n          <button onClick={() => check(\"element\",\"vampire\")}>vampire</button><br/>\n          <button onClick={() => check(\"element\",\"werewolf\")}>werewolf</button><br/>\n          <button onClick={() => check(\"element\",\"psychological\")}>psychological</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"element\",\"skip\")}>skip</button><br/>\n          <p>Where?</p>\n          <button onClick={() => check(\"setting\",\"hell\")}>hell</button><br/>\n          <button onClick={() => check(\"setting\",\"castle\")}>castle</button><br/>\n          <button onClick={() => check(\"setting\",\"forest\")}>forest</button><br/>\n          <button onClick={() => check(\"setting\",\"workplace\")}>typical real world (school/home/workplace)</button><br/>\n          <button onClick={() => check(\"setting\",\"multilocation\")}>multilocation</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <p>Are the monsters truly the monsters?</p>\n          <button onClick={() => check(\"trope\",\"evil monsters\")}>yes</button><br/>\n          <button onClick={() => check(\"trope\",\"evil humans\")}>no, it's humans so throw in evil ppl</button><br/>\n          <button onClick={() => check(\"trope\",\"both good\")}>no, the monsters aren't evil. nor are the humans</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <p> Monsterxhuman ahem...romance? *hint hint wink wink*</p>\n          <button onClick={() => check(\"character\",\"monsterxhuman\")}>NO!!!</button><br/>\n          <button onClick={() => check(\"character\",\"no monsterxhuman\")}>don't question love</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"character\",\"trope\",\"setting\",\"element\"],\"horror\",\"fantasy\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id = \"folk\">\n          <p>Category of folklore?</p>\n          <button onClick={() => check(\"subgenre\",\"folktale\")}>folktale</button><br/>\n          <button onClick={() => check(\"subgenre\",\"fairy\")}>fairytale</button><br/>\n          <button onClick={() => check(\"subgenre\",\"myth\")}>myth</button><br/>\n          <button onClick={() => check(\"subgenre\",\"fable\")}>fable</button><br/>\n          <p>Mood?</p>\n          <button onClick={() => check(\"mood\",\"cute\")}>i wanna laugh</button><br/>\n          <button onClick={() => check(\"mood\",\"exciting\")}>a page turner, smthn to keep me on the edge of my seat</button><br/>\n          <button onClick={() => check(\"mood\",\"sad\")}>tearjerker</button><br/>\n          <button onClick={() => check(\"mood\",\"dark\")}>something dark and scary enough to make me crap myself</button><br/>\n          <button onClick={() => check(\"mood\",\"entertaining\")}>just smthn entertaining</button><br/>\n          <p>Magical beings?</p>\n          <button onClick={() => check(\"character\",\"fae\")}>fairies</button><br/>\n          <button onClick={() => check(\"character\",\"mermaid\")}>mermaids</button><br/>\n          <button onClick={() => check(\"character\",\"dragon\")}>dragons</button><br/>\n          <button onClick={() => check(\"character\",\"leprechaun\")}>leprechauns</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <p>Main character?</p>\n          <button onClick={() => check(\"POV\",\"royal\")}>someone from royalty</button><br/>\n          <button onClick={() => check(\"POV\",\"genius\")}>the most clever or wise</button><br/>\n          <button onClick={() => check(\"POV\",\"dunce\")}>the dunce</button><br/>\n          <button onClick={() => check(\"POV\",\"rando\")}>idk just some rando</button><br/>\n          <p>Common plots?</p>\n          <button onClick={() => check(\"trope\",\"good vs evil\")}>good vs evil</button><br/>\n          <button onClick={() => check(\"trope\",\"defeat monster\")}>defeat monster</button><br/>\n          <button onClick={() => check(\"trope\",\"quest\")}>quest</button><br/>\n          <button onClick={() => check(\"trope\",\"voyage\")}>voyage</button><br/>\n          <button onClick={() => check(\"trope\",\"win hand in marriage\")}>win hand in marriage</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"trope\",\"skip\")}>skip</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"trope\",\"POV\",\"character\",\"mood\"],\"folk\",\"fantasy\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id = \"witch\">\n        <p>Set when?</p>\n          <button onClick={() => check(\"time\",\"modern\")}>modern day</button><br/>\n          <button onClick={() => check(\"time\",\"medeival\")}>medeival times</button><br/>\n          <button onClick={() => check(\"time\",\"victorian\")}>victorian era</button><br/>\n          <button onClick={() => check(\"time\",\"precolonial\")}>precolonial era</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"time\",\"skip\")}>other</button><br/>\n        <p>fantasy creatures?</p>\n          <button onClick={() => check(\"character\",\"dragon\")}>dragons</button><br/>\n          <button onClick={() => check(\"character\",\"unicorn\")}>unicorns</button><br/>\n          <button onClick={() => check(\"character\",\"phoenix\")}>phoenix</button><br/>\n          <button onClick={() => check(\"character\",\"centuar\")}>centuar</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"character\",\"time\"],\"witch\",\"fantasy\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n\n        <div id=\"dystopian\">\n          <p>Govt is the big baddie?</p>\n          <button onClick={() => check(\"character\",\"bad govt\")}>yes, some totalitarian regime screwing everyone over</button><br/>\n          <button onClick={() => check(\"character\",\"govt\")}>no</button><br/>\n          <p>False utopia?</p>\n          <button onClick={() => check(\"setting\",\"false utopia\")}>yes</button><br/>\n          <button onClick={() => check(\"setting\",\"utopia\")}>no, real utopia</button><br/>\n          <button onClick={() => check(\"setting\",\"dystopia\")}>no things are very clearly bad</button><br/>\n          <p>War/fighting to defeat whatever's causing this?</p>\n          <button onClick={() => check(\"element\",\"war\")}>yes put focus on the war</button><br/>\n          <button onClick={() => check(\"element\",\"bg war\")}>yes but in the background. it's not the central focus</button><br/>\n          <button onClick={() => check(\"element\",\"no war\")}>no</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"character\",\"setting\",\"element\"],\"dystopian\",\"sciencefiction\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id=\"alien\">\n          <p>Type of alien?</p>\n          <button onClick={() => check(\"character\",\"humanoid\")}>humanoids</button><br/>\n          <button onClick={() => check(\"character\",\"not humanoid\")}>not humanoids but humans can still communicate with them</button><br/>\n          <button onClick={() => check(\"character\",\"microscopic\")}>microscopic/parasitic</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <p>Taking place in/on?</p>\n          <button onClick={() => check(\"setting\",\"earth\")}>earth</button><br/>\n          <button onClick={() => check(\"setting\",\"spaceship\")}>spaceship</button><br/>\n          <button onClick={() => check(\"setting\",\"other\")}>other planets</button><br/>\n          <p>Alien invasion?</p>\n          <button onClick={() => check(\"element\",\"alien invasion\")}>yes</button><br/>\n          <button onClick={() => check(\"element\",\"no invasion\")}>no</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"element\",\"skip\")}>skip</button><br/>\n          <p>How many aliens?</p>\n          <button onClick={() => check(\"POV\",\"army\")}>an army</button><br/>\n          <button onClick={() => check(\"POV\",\"one\")}>one or a few</button><br/>\n          <p>Friendly/are they humanized?</p>\n          <button onClick={() => check(\"trope\",\"friendly alien\")}>yes</button><br/>\n          <button onClick={() => check(\"trope\",\"mean alien\")}>no</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"trope\",\"skip\")}>skip</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"character\",\"setting\",\"element\",\"POV\",\"trope\"],\"alien\",\"sciencefiction\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id=\"AU\">\n          <p>Type of universe(s)?</p>\n          <button onClick={() => check(\"setting\",\"parrallel\")}>related to our own, maybe even crossover of the two</button><br/>\n          <button onClick={() => check(\"setting\",\"alternate\")}>just an alternate reality unrelated to our own</button><br/>\n          <button onClick={() => check(\"setting\",\"multiverse\")}>many universes that might crossover w e/o</button><br/>\n          <p>Interstellar travel?</p>\n          <button onClick={() => check(\"element\",\"interstellar\")}>no</button><br/>\n          <button onClick={() => check(\"element\",\"no interstellar\")}>yes</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"setting\",\"element\"],\"AU\",\"sciencefiction\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id=\"apocalyptic\">\n          <p>Desolate areas w ppl struggling to survive?</p>\n          <button onClick={() => check(\"setting\",\"wasteland\")}>wastelands, no food no water maybe cannibals around</button><br/>\n          <button onClick={() => check(\"setting\",\"ok wasteland\")}>yeah things are bad but ppl aren't like...roaming around in the wild</button><br/>\n          <button onClick={() => check(\"setting\",\"land\")}>things are ok</button><br/>\n          <p>What caused the disaster?</p>\n          <button onClick={() => check(\"trope\",\"nuclear\")}>nuclear</button><br/>\n          <button onClick={() => check(\"trope\",\"zombie\")}>zombie</button><br/>\n          <button onClick={() => check(\"trope\",\"disease\")}>disease/pandemic</button><br/>\n          <button onClick={() => check(\"trope\",\"war\")}>war</button><br/>\n          <button onClick={() => check(\"trope\",\"environment\")}>environmental destruction/climate change</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"trope\",\"skip\")}>skip</button><br/>\n          <p>Religious elements?</p>\n          <button onClick={() => check(\"element\",\"bible\")}>yeah Biblical references or be directly about Biblical events</button><br/>\n          <button onClick={() => check(\"element\",\"other\")}>elements from other religions, no Christianity/Catholicism</button><br/>\n          <button onClick={() => check(\"element\",\"atheist\")}>no. religion has no business here</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"element\",\"skip\")}>skip</button><br/>\n          <p>Where's the government in all this?</p>\n          <button onClick={() => check(\"character\",\"no govt\")}>nowhere</button><br/>\n          <button onClick={() => check(\"character\",\"govt\")}>a small governemnt present</button><br/>\n          <button onClick={() => check(\"character\",\"bad govt\")}>evil government</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"setting\",\"element\",\"trope\",\"character\"],\"apocalyptic\",\"sciencefiction\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id=\"tech\">\n          <p>Tech element?</p>\n          <button onClick={() => check(\"element\",\"AI\")}>AI</button><br/>\n          <button onClick={() => check(\"element\",\"VR\")}>VR</button><br/>\n          <button onClick={() => check(\"element\",\"robot\")}>robots</button><br/>\n          <button onClick={() => check(\"element\",\"nanotech\")}>nanotech</button><br/>\n          <button onClick={() => check(\"element\",\"genetic engineering\")}>genetic engineering</button><br/>\n          <button onClick={() => check(\"element\",\"evolution\")}>human development</button><br/>\n          <p>Humans advanced in any way?</p>\n          <button onClick={() => check(\"character\",\"microchip\")}>yeah, microchips implanted in brains, as the antivaxxers say</button><br/>\n          <button onClick={() => check(\"character\",\"robot\")}>they live w robots/cool gadgets</button><br/>\n          <button onClick={() => check(\"character\",\"superhuman\")}>no tech, but they've evolved to become different/superhuman</button><br/>\n          <button onClick={() => check(\"character\",\"no tech\")}>no, most don't have access to all the cool stuff bc it's expensive</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"character\",\"skip\")}>skip</button><br/>\n          <p>Is the tech actually being used for malicious purposes?</p>\n          <button onClick={() => check(\"trope\",\"bad govt\")}>yes the government or some other entity is misusing it</button><br/>\n          <button onClick={() => check(\"trope\",\"scientist\")}>yeah theres a mad scientist somewhere</button><br/>\n          <button onClick={() => check(\"trope\",\"good tech\")}>no, it just makes lives easier</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"trope\",\"skip\")}>skip</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"element\",\"character\",\"trope\"],\"tech\",\"sciencefiction\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id=\"timetravel\">\n          <p>Forward or backward?</p>\n          <button onClick={() => check(\"time\",\"forward\")}>forward</button><br/>\n          <button onClick={() => check(\"time\",\"backward\")}>backward</button><br/>\n          <button onClick={() => check(\"time\",\"both\")}>both</button>\n          <p>Mechanism?</p>\n          <button onClick={() => check(\"trope\",\"time slip\")}>time slip</button><br/>\n          <button onClick={() => check(\"trope\",\"time loop\")}>time loop</button><br/>\n          <button onClick={() => check(\"trope\",\"time reverse\")}>time reverse</button><br/>\n          <button onClick={() => check(\"trope\",\"time machine\")}>time machine, in whatever form</button><br/>\n          <button onClick={() => check(\"trope\",\"visitor\")}>communication from another time</button><br/>\n          <button onClick={() => check(\"trope\",\"precognition\")}>precognition</button><br/>\n          <p>Number of travels?</p>\n          <button onClick={() => check(\"element\",\"hopping\")}>hopping around in time</button><br/>\n          <button onClick={() => check(\"element\",\"staying\")}>going to one time once and staying there</button><br/>\n          <button onClick={() => check(\"element\",\"returning\")}>going to one time but returning to original time</button><br/>\n          <p>Number of timelines?</p>\n          <button onClick={() => check(\"setting\",\"one\")}>just one, I don't want a headache</button><br/>\n          <button onClick={() => check(\"setting\",\"multiple\")}>multiple, I wanna be thoroughly confused</button><br/>\n          <p>Meeting ancestors/descendents?</p>\n          <button onClick={() => check(\"character\",\"no relatives\")}>no, you might get into icky situations that way</button><br/>\n          <button onClick={() => check(\"character\",\"relatives\")}>yes</button><br/>\n          <p>Travelers?</p>\n          <button onClick={() => check(\"POV\",\"govt\")}>ppl associated w the govt</button><br/>\n          <button onClick={() => check(\"POV\",\"no govt\")}>ppl associated w some non-govt entity</button><br/>\n          <button onClick={() => check(\"POV\",\"rando group\")}>a group not associated w anything</button><br/>\n          <button onClick={() => check(\"POV\",\"rando\")}>idk some rando</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"element\",\"character\",\"trope\",\"time\",\"POV\",\"setting\"],\"timetravel\",\"sciencefiction\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n\n        <div id=\"romance\">\n          <p>What type of romance are you in the mood for?</p>\n          <button onClick={() => check(\"mood\",\"cute\")}>cute and lighthearted, like a romcom</button><br/>\n          <button onClick={() => check(\"mood\",\"forbidden\")}>forbidden romance, I wanna read about a taboo relationship</button><br/>\n          <button onClick={() => check(\"mood\",\"serious\")}>serious and dramatic, you know...like two people thinking they'll die without each other</button><br/>\n          <button onClick={() => check(\"mood\",\"dark\")}>dark and gritty. they've gotta be in danger, risking their lives to be together</button><br/>\n          <p>The age of the couple?</p>\n          <button onClick={() => check(\"character\",\"teens\")}>teens</button><br/>\n          <button onClick={() => check(\"character\",\"YAs\")}>20-30 somethings</button><br/>\n          <button onClick={() => check(\"character\",\"adults\")}>middle aged</button><br/>\n          <button onClick={() => check(\"character\",\"seniors\")}>elderly</button><br/>\n          <p>Any of these settings sound good?</p>\n          <button onClick={() => check(\"setting\",\"school\")}>high school/college</button><br/>\n          <button onClick={() => check(\"setting\",\"royalty\")}>royalty/kingdom</button><br/>\n          <button onClick={() => check(\"setting\",\"workplace\")}>workplace. im thinking ppl with 40 hr work weeks and depressing cubicles</button><br/>\n          <button onClick={() => check(\"setting\",\"countryside\")}>countryside</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"setting\",\"skip\")}>skip</button><br/>\n          <p>Tropes?</p>\n          <button onClick={() => check(\"trope\",\"ETL\")}>enemies to lovers</button><br/>\n          <button onClick={() => check(\"trope\",\"FTL\")}>friends to lovers</button><br/>\n          <button onClick={() => check(\"trope\",\"CTL\")}>childhood connection</button><br/>\n          <button onClick={() => check(\"trope\",\"soulmates\")}>soulmates</button><br/>\n          <button onClick={() => check(\"trope\",\"roomates\")}>and they were roomates</button><br/>\n          <button onClick={() => check(\"trope\",\"break make\")}>break up and make up</button><br/>\n          <button onClick={() => check(\"trope\",\"trapped\")}>trapped together/there was only one bed</button><br/>\n          <button onClick={() => check(\"trope\",\"marriage\")}>marriage of convenience</button><br/>\n          <button onClick={() => check(\"trope\",\"amnesia\")}>amnesia/mistaken identity</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"trope\",\"skip\")}>skip</button><br/>\n          <p>Specifics of the relationship?</p>\n          <button onClick={() => check(\"element\",\"lgbtq+\")}>lgbtq+</button><br/>\n          <button onClick={() => check(\"element\",\"age difference\")}>age difference</button><br/>\n          <button onClick={() => check(\"element\",\"open relationship\")}>open relationship</button><br/>\n          <button onClick={() => check(\"element\",\"long distance\")}>long distance</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"element\",\"skip\")}>skip</button><br/><br/>\n          <button class=\"skipped\" onClick={() => back([\"mood\",\"element\",\"character\",\"trope\",\"setting\"],\"romance\",\"realistic\")}>back</button>\n          <button class=\"skipped\" onClick={submit}>submit</button>\n        </div>\n        <div id=\"historicfiction\">\n          <p>Historical eras?</p>\n          <button onClick={() => check(\"time\",\"classical\")}>classical</button><br/>\n          <button onClick={() => check(\"time\",\"middle ages\")}>middle ages</button><br/>\n          <button onClick={() => check(\"time\",\"early modern\")}>early modern</button><br/>\n          <button onClick={() => check(\"time\",\"modern\")}>modern (excluding current century)</button><br/>\n          <button onClick={() => check(\"time\",\"multiperiod\")}>multiperiod</button><br/>\n          <p>Location?</p>\n          <button onClick={() => check(\"setting\",\"Americas\")}>Americas</button><br/>\n          <button onClick={() => check(\"setting\",\"Asia\")}>Asia</button><br/>\n          <button onClick={() => check(\"setting\",\"Europe\")}>Europe</button><br/>\n          <button onClick={() => check(\"setting\",\"Africa\")}>Africa</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"setting\",\"skip\")}>skip</button><br/>\n          <p>Alternate History?</p>\n          <button onClick={() => check(\"element\",\"AH\")}>Yes</button><br/>\n          <button onClick={() => check(\"element\",\"no AH\")}>No, stick to the facts</button><br/>\n          <button class=\"skipped\" onClick={() => back([\"time\",\"element\",\"setting\"],\"historicfiction\",\"realistic\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id = \"mystery\">\n          <p>Mood?</p>\n          <button onClick={() => check(\"mood\",\"cute\")}>lighthearted, mystery doesn't involve any dangerous situations</button><br/>\n          <button onClick={() => check(\"mood\",\"serious\")}>serious</button><br/>\n          <button onClick={() => check(\"mood\",\"dark\")}>scary, something that'll take a psychological toll on me</button><br/>   \n          <button onClick={() => check(\"mood\",\"cerebral\")}>cerebral, I wanna use my brain</button><br/>\n          <p>Type of mystery?</p>\n          <button onClick={() => check(\"subgenre\",\"detective\")}>detective</button><br/>\n          <button onClick={() => check(\"subgenre\",\"thriller\")}>thriller</button><br/>\n          <button onClick={() => check(\"subgenre\",\"procedural\")}>procedural</button><br/>\n          <button onClick={() => check(\"subgenre\",\"caper\")}>caper</button><br/>\n          <p>Would you like crime with your order?</p>\n          <button onClick={() => check(\"trope\",\"murder\")}>murder</button><br/>\n          <button onClick={() => check(\"trope\",\"robbery\")}>robbery</button><br/>\n          <button onClick={() => check(\"trope\",\"kidnapping\")}>kidnapping/missing person</button><br/>\n          <button onClick={() => check(\"trope\",\"no crime\")}>no crime</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"trope\",\"skip\")}>skip</button><br/>  \n          <p>Based on true story/true crime?</p>\n          <button onClick={() => check(\"element\",\"true crime\")}>no</button><br/>\n          <button onClick={() => check(\"element\",\"no true crime\")}>yes</button><br/>\n          <button class=\"skipped\" onClick={() => check(\"element\",\"skip\")}>skip</button><br/>     \n          <p>POV?</p>\n          <button onClick={() => check(\"POV\",\"killer\")}>the person who knows the answer, like a killer if it's a murder mystery</button><br/>\n          <button onClick={() => check(\"POV\",\"victim\")}>the victim/the person most affected by the mystery</button><br/>\n          <button onClick={() => check(\"POV\",\"authorities\")}>authorities</button><br/>\n          <button onClick={() => check(\"POV\",\"detective\")}>private detective</button><br/>   \n          <button onClick={() => check(\"POV\",\"rando\")}>idk just some rando it doesn't matter</button><br/> \n          <button class=\"skipped\" onClick={() => back([\"mood\",\"subgenre\",\"trope\",\"element\",\"POV\"],\"mystery\",\"realistic\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n        <div id = \"adventure\">\n          <p>Mood?</p>\n          <button onClick={() => check(\"mood\",\"cute\")}>lighthearted, witty, funny</button><br/> \n          <button onClick={() => check(\"mood\",\"serious\")}>tense, serious</button><br/> \n          <button onClick={() => check(\"mood\",\"dark\")}>dark, intense</button><br/>    \n          <button onClick={() => check(\"mood\",\"fun\")}>epic adventure but i don't mean epic like the poem type</button><br/> \n          <p>Epic?</p>\n          <button onClick={() => check(\"POV\",\"no epic\")}>no</button><br/> \n          <button onClick={() => check(\"POV\",\"epic\")}>yes</button><br/> \n          <button>skip</button>\n          <p>Characters grow up over time?</p>\n          <button onClick={() => check(\"character\",\"bildungsroman\")}>yes</button><br/> \n          <button onClick={() => check(\"character\",\"no bildungsroman\")}>no. i fear the passage of time</button><br/> \n          <button>skip</button>\n          <p>Hero(es)/villian(s)?</p>\n          <button onClick={() => check(\"trope\",\"genius\")}>yep the underdog/rouge hero helping a group of people but theres not necessarily a villian</button><br/> \n          <button onClick={() => check(\"trope\",\"traveler\")}>no just someone traveling to new lands maybe learning lessons in the process, an explorer more than a hero</button><br/> \n          <button onClick={() => check(\"trope\",\"travelers\")}>no central hero just different characters traveling around</button><br/>   \n          <button onClick={() => check(\"trope\",\"hero\")}>want some baddies being a pain in the neck for ppl and theres only one person to put an end to them</button><br/>      \n          <p>Fighting?</p>\n          <button onClick={() => check(\"element\",\"banter\")}>no the most i want is banter</button><br/> \n          <button onClick={() => check(\"element\",\"guns\")}>yeah weapons...guns, bombs, maybe war</button><br/> \n          <button onClick={() => check(\"element\",\"spears\")}>maybe like bows and arrows, spears, or swords</button><br/>    \n          <button onClick={() => check(\"element\",\"fists\")}>fists to faces</button><br/>  \n          <button class=\"skipped\" onClick={() => back([\"mood\",\"character\",\"trope\",\"element\",\"POV\"],\"adventure\",\"realistic\")}>back</button>\n          <button class=\"skipped\" onClick={() => submit()}>submit</button>\n        </div>\n<div>\n                    {this.state.loading || !this.state.book ? (\n                <div>Waiting for user selection</div>\n                ):(\n                <div>\n                <div className=\"grid-container\">\n                    <div className=\"a\">                    \n                        <img src={this.state.book.PictureLink} height={400} witdth={400} />\n                    </div>\n                    <div className=\"b\">\n                        <div className=\"chld\">\n                        <div className=\"txt\">Title: {this.state.book.book_name}</div>\n                        <div className=\"txt\">Author: {this.state.book.author}</div>\n                        <div className=\"txts\">{this.state.book.Synopsis}</div>\n                        <div className=\"txtss\">Genre: {this.state.book.genre}</div>\n                        <div className=\"txtss\">Publication Year: {this.state.book.publication_date}</div>\n                        <div className=\"txtss\">Rating: {this.state.book.rating}</div>\n                        <div className=\"txtss\">Maximum Pages: {this.state.book.maximum_pages}</div>\n                        <div className=\"txtss\">Age Range: {this.state.book.age_range}</div>\n                        {this.state.book.series? (\n                            <div className=\"txtss\" >Series: Yes</div>\n                        ):(\n                            <div className=\"txtss\">Series: No</div>\n                        )}\n                        {this.state.book.best_seller? (\n                            <div className=\"txtss\">Best Seller: Yes </div>\n                        ):(\n                            <div className=\"txtss\">Best Seller: No</div>\n                        )}\n                        {this.state.book.trigger_warning? (\n                            <div className=\"txtss\">Trigger Warnings: {this.state.book.trigger_warning} </div>\n                        ):(\n                            <div className=\"txtss\">Trigger Warnings: No</div>\n                        )}\n                        <div className=\"txtss\">\n                        <a href={this.state.book.LinkToAmazon} target=\"_blank\">Buy Here</a></div>\n                        </div>\n                    </div>\n                </div>\n \n{/*  \n                        <div>Title: {this.state.book.idbook_info}</div>\n                        <div>Author: {this.state.book.author}</div>\n                        <img src={this.state.book.picture} height={400} witdth={400} />\n                        <div>Genre: {this.state.book.genre}</div>\n                        <div>Publication Year: {this.state.book.publication_date}</div>\n                        <div>Rating: {this.state.book.rating}</div>\n                        <div>Maximum Pages: {this.state.book.maximum_pages}</div>\n                        <div>Age Range: {this.state.book.age_range}</div>\n                        {this.state.book.series? (\n                            <div>Series: Yes</div>\n                        ):(\n                            <div>Series: No</div>\n                        )}\n                        {this.state.book.best_seller? (\n                            <div>Best Seller: Yes </div>\n                        ):(\n                            <div>Best Seller: No</div>\n                        )}\n                        {this.state.book.triggers? (\n                            <div>Trigger Warnings: {this.state.book.triggers} </div>\n                        ):(\n                            <div>Trigger Warnings: No</div>\n                        )}\n                        \n                        <div>Buy Here: {this.state.book.buy}</div>\n                        <div class=\"text-center\"> Synopsis: {this.state.book.synopsis}</div> */}\n                    </div>\n                )}\n\n                \n            </div>  \n        </body>\n    );\n  }\n}\nexport default TakeQuiz;\n\n","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/searchPage/searchPage.js",["194"],"import React from \"react\";\nimport { useState } from 'react';\nimport { useEffect } from \"react\";\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Footer } from \"../footer\";\n\n\n// const url = \"http://localhost:3000/search\";\nconst SearchPage = () => {\n    //test data\n    /*\n    const rowData = [\n        {title: \"Love Life\", author: \"Amy Azelia\", genre: \"Romance\", votes: 1000000, publishingDate: \"6/10/21\", link:\"http://allbooks.com/Love-Life\" },\n        {title: \"The Secret Society\", author: \"Adrien Potter\", genre: \"Mystery\", votes: 100000, publishingDate: \"7/10/12\", link:\"http://allbooks.com/TheSS\"},\n        {title: \"Ancient Civilization\", author: \"Gideon Aberforth\", genre: \"History\", votes: 100002, publishingDate: \"10/10/20\", link:\"http://allbooks.com/AncCiv\"},\n        {title: \"Elite Guardians\", author: \"Loki Odinson\", genre: \"SciFi\", votes: 10005, publishingDate: \"9/10/11\", link:\"http://allbooks.com/Elguard\"},\n        {title: \"Love Life\", author: \"Amy Azelia\", genre: \"Romance\", votes: 1000000, publishingDate: \"6/10/21\", link:\"http://allbooks.com/Love-Life\" },\n        {title: \"The Secret Society\", author: \"Adrien Potter\", genre: \"Mystery\", votes: 100000, publishingDate: \"7/10/12\", link:\"http://allbooks.com/TheSS\"},\n        {title: \"Ancient Civilization\", author: \"Gideon Aberforth\", genre: \"History\", votes: 100002, publishingDate: \"10/10/20\", link:\"http://allbooks.com/AncCiv\"},\n        {title: \"Elite Guardians\", author: \"Loki Odinson\", genre: \"SciFi\", votes: 10005, publishingDate: \"9/10/11\", link:\"http://allbooks.com/Elguard\"},\n        {title: \"Love Life\", author: \"Amy Azelia\", genre: \"Romance\", votes: 1000000, publishingDate: \"6/10/21\", link:\"http://allbooks.com/Love-Life\" },\n        {title: \"The Secret Society\", author: \"Adrien Potter\", genre: \"Mystery\", votes: 100000, publishingDate: \"7/10/12\", link:\"http://allbooks.com/TheSS\"},\n        {title: \"Ancient Civilization\", author: \"Gideon Aberforth\", genre: \"History\", votes: 100002, publishingDate: \"10/10/20\", link:\"http://allbooks.com/AncCiv\"},\n        {title: \"Elite Guardians\", author: \"Loki Odinson\", genre: \"SciFi\", votes: 10005, publishingDate: \"9/10/11\", link:\"http://allbooks.com/Elguard\"},\n        {title: \"Love Life\", author: \"Amy Azelia\", genre: \"Romance\", votes: 1000000, publishingDate: \"6/10/21\", link:\"http://allbooks.com/Love-Life\" },\n        {title: \"The Secret Society\", author: \"Adrien Potter\", genre: \"Mystery\", votes: 100000, publishingDate: \"7/10/12\", link:\"http://allbooks.com/TheSS\"},\n        {title: \"Ancient Civilization\", author: \"Gideon Aberforth\", genre: \"History\", votes: 100002, publishingDate: \"10/10/20\", link:\"http://allbooks.com/AncCiv\"},\n        {title: \"Elite Guardians\", author: \"Loki Odinson\", genre: \"SciFi\", votes: 10005, publishingDate: \"9/10/11\", link:\"http://allbooks.com/Elguard\"},\n        {title: \"Love Life\", author: \"Amy Azelia\", genre: \"Romance\", votes: 1000000, publishingDate: \"6/10/21\", link:\"http://allbooks.com/Love-Life\" },\n        {title: \"The Secret Society\", author: \"Adrien Potter\", genre: \"Mystery\", votes: 100000, publishingDate: \"7/10/12\", link:\"http://allbooks.com/TheSS\"},\n        {title: \"Ancient Civilization\", author: \"Gideon Aberforth\", genre: \"History\", votes: 100002, publishingDate: \"10/10/20\", link:\"http://allbooks.com/AncCiv\"},\n        {title: \"Elite Guardians\", author: \"Loki Odinson\", genre: \"SciFi\", votes: 10005, publishingDate: \"9/10/11\", link:\"http://allbooks.com/Elguard\"}\n    ];\n    */\n\n    //const rowData = [];\n\n    useEffect( () => {\n        fetchItems();\n    }, []);\n\n    const [rowData, setItems] = useState([]);\n\n    const fetchItems = async () => {\n        const data = await fetch('/searchup');\n        const rowData = await data.json();\n        setItems(rowData);\n    };\n\n\n    // const [rowData, setRowData] = useState([]);\n\n    // useEffect(() => {\n    //     fetch(url)\n    //     .then(result => result.json())\n    //     .then(rowData => setRowData(rowData))\n    // }, []);\n\n\n\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumApi, setGridColumnApi] = useState(null);\n\n\n    const searchDivStyle={\n        backgroundColor:\"#dedede\",\n        paddingTop:'20px',\n        paddingBottom:'20px',\n        borderRadius:'0px'\n    }\n\n    const searchStyle={\n        width:\"50%\",\n        padding:\"10px 20px\"\n    }\n\n    function onGridReady(params) {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n      }\n    const onFilterTextChange=(e)=>{\n      gridApi.setQuickFilter(e.target.value)\n    }\n    \n    return (\n        <div>\n            <div style={{padding:20, fontSize:40, fontFamily:\"Lucida Console\"}}>Search our Directory!</div>\n            {/* To Do: add filters and sortablilty */}\n            <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder=\"type your search here...\"/>\n            </div>\n\n            <div className=\"ag-theme-alpine\" style={{paddingLeft: 50, height: 600, width: 1400}}>\n                <AgGridReact\n                    rowData={rowData}\n                    onGridReady={onGridReady}\n                    >\n                    <AgGridColumn field=\"book_name\" filter={true}></AgGridColumn>\n                    <AgGridColumn field=\"author\" filter={true}></AgGridColumn>\n                    <AgGridColumn field=\"genre\" filter=\"agTextColumnFilter\"></AgGridColumn>\n                    <AgGridColumn field=\"rating\" filter=\"agNumberColumnFilter\"></AgGridColumn>\n                    <AgGridColumn field=\"age_range\" filter=\"agTextColumnFilter\"></AgGridColumn>\n                    <AgGridColumn field=\"maximum_pages\" filter=\"agNumberColumnFilter\"></AgGridColumn>\n                    <AgGridColumn field=\"publication_date\" filter=\"agNumberColumnFilter\"></AgGridColumn>\n                    <AgGridColumn field=\"trigger_warning\" filter=\"agTextColumnFilter\"></AgGridColumn>\n                </AgGridReact>\n            </div>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <Footer/>\n        </div>\n    );\n};\n    \nexport {SearchPage};\n// // const url = '/rest/login'\n\n// class SearchPage extends Component {\n//     constructor() {\n//         super();\n//         this.state = {\n           \n//         }\n//     }\n    \n//     render() {\n     \n//      return (  \n//         <div>\n//          Search me!\n         \n//         </div>\n//     );\n//     }\n// }\n\n// export default SearchPage;\n\n","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/Login.js",["195","196"],"import React, { Component } from \"react\";\nimport { PropTypes } from 'react'\nimport { Footer } from \"./footer\";\n\n// import { Link } from \"react-router-dom\";\n\n// const url = '/rest/login'\nconst appStyle = {\n    height: '250px',\n    display: 'flex'\n};\n\nconst formStyle = {\n    margin: 'auto',\n    padding: '10px',\n    borderRadius: '5px',\n    background: '#ebd0b9',\n    width: '290px',\n    display: 'block'\n};\n\nconst labelStyle = {\n    margin: '10px 0 5px 0',\n    fontFamily: 'Arial, Helvetica, sans-serif',\n    fontSize: '15px',\n};\n\nconst inputStyle = {\n    margin: '5px 0 10px 0',\n    padding: '0px', \n    border: '1px solid #bfbfbf',\n    borderRadius: '0px',\n    boxSizing: 'border-box',\n    width: '100%'\n};\n\nconst submitStyle = {\n    margin: '10px 0 0 0',\n    padding: '7px 7px',\n    border: '1px solid #efffff',\n    borderRadius: '3px',\n    background: '#aaa',\n    width: '100%', \n    fontSize: '15px',\n    color: 'white',\n    display: 'block'\n};\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmitLogin = this.handleSubmitLogin.bind(this);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            signupEmail: \"\",\n            signupPassword: \"\",\n            account: {},\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmitLogin = (e) => {\n        e.preventDefault();\n    \n\n        fetch('/rest/login', {\n            method: 'POST',\n            redirect: 'follow',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password,\n            })\n        }).then(response => {\n\n            if (response.status === 401) {\n            alert(\"Wrong combination, please try again\");\n            window.location.href =  'http://localhost:3000';\n            \n            }\n            else if (response.status === 201)\n            {\n                this.props.handleLogin();\n                const users = this.state.username;\n                localStorage.setItem('current_user', JSON.stringify(users))\n                window.location.href = `http://localhost:3000/dashboard/${this.state.username}`;\n                //this.props.history.push(`/dashboard/${this.state.username}`, {state: this.state.username});\n            }\n            })\n           .catch(function(error) {\n            \n                alert(error);\n            });\n        \n        }\n\n    render() {\n     const username = this.state.username;\n     const password = this.state.password;\n     return ( \n    <div>\n     <div style={{padding: 10}}>\n        <div style={appStyle}>\n            <div style={formStyle}>\n            <b>Log in</b>\n            <br/>\n            <br/>\n            <form onSubmit={this.handleSubmitLogin}>\n                <table border=\"0\">\n                    <tbody>\n                        <tr>\n                            <td>Username:</td>\n                            <div style={inputStyle}>\n                                <input type=\"username\" name=\"username\" size=\"20\" autocorrect=\"off\" spellcheck=\"false\"\n                                       autocapitalize=\"off\" value={username} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                        <tr>\n                            <td>Password:</td>\n                            <div style={inputStyle}>\n                                <input type=\"password\" name=\"password\" size=\"20\"\n                                       required value={password} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                    </tbody>\n                </table>\n                <br/>\n                <input style={submitStyle} type=\"submit\" value=\"Submit\"/>\n            </form>\n            <a href=\"forgot\">Forgot your password?</a>\n            <br/>\n             <a href=\"forgotusername\">Forgot your username?</a>\n            <br/>\n            <div>\n                Don't have an account? \n                <a href=\"/signup\"> Sign Up Here!</a>\n            </div>\n            <br/>\n            </div>\n        </div>\n        </div>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <Footer/>\n        </div>\n        );\n    }\n}\n\nexport default Login;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/surpriseMe/surpriseMe.js",["197","198"],"import React from \"react\";\nimport './surpriseMe.css';\nimport { Footer } from \"../footer\";\n\nexport default class Testfetch extends React.Component{\n    state = {\n        loading:true,\n        book:null\n    };\n    async componentDidMount() {\n        const url = \"http://localhost:5000/surpriseme\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({ book: data[0], loading: false});\n        //console.log(data);\n\n    }\n    render(){\n        return(\n            <body>\n                <div>\n                    {this.state.loading || !this.state.book ? (\n                <div>loading...</div>\n                ):(\n                <div>\n                <div className=\"grid-container\">\n                    <div className=\"a\">                    \n                        <img src={this.state.book.PictureLink} height={400} witdth={400} />\n                    </div>\n                    <div className=\"b\">\n                        <div className=\"chld\">\n                        <div className=\"txt\">Title: {this.state.book.book_name}</div>\n                        <div className=\"txt\">Author: {this.state.book.author}</div>\n                        <div className=\"txts\">{this.state.book.Synopsis}</div>\n                        <div className=\"txtss\">Genre: {this.state.book.genre}</div>\n                        <div className=\"txtss\">Publication Year: {this.state.book.publication_date}</div>\n                        <div className=\"txtss\">Rating: {this.state.book.rating}</div>\n                        <div className=\"txtss\">Maximum Pages: {this.state.book.maximum_pages}</div>\n                        <div className=\"txtss\">Age Range: {this.state.book.age_range}</div>\n                        {this.state.book.series? (\n                            <div className=\"txtss\" >Series: Yes</div>\n                        ):(\n                            <div className=\"txtss\">Series: No</div>\n                        )}\n                        {this.state.book.best_seller? (\n                            <div className=\"txtss\">Best Seller: Yes </div>\n                        ):(\n                            <div className=\"txtss\">Best Seller: No</div>\n                        )}\n                        {this.state.book.trigger_warning? (\n                            <div className=\"txtss\">Trigger Warnings: {this.state.book.trigger_warning} </div>\n                        ):(\n                            <div className=\"txtss\">Trigger Warnings: No</div>\n                        )}\n                        <div className=\"txtss\">\n                        <a href={this.state.book.LinkToAmazon} target=\"_blank\">Buy Here</a></div>\n                        </div>\n                    </div>\n                </div>\n \n{/*  \n                        <div>Title: {this.state.book.idbook_info}</div>\n                        <div>Author: {this.state.book.author}</div>\n                        <img src={this.state.book.picture} height={400} witdth={400} />\n                        <div>Genre: {this.state.book.genre}</div>\n                        <div>Publication Year: {this.state.book.publication_date}</div>\n                        <div>Rating: {this.state.book.rating}</div>\n                        <div>Maximum Pages: {this.state.book.maximum_pages}</div>\n                        <div>Age Range: {this.state.book.age_range}</div>\n                        {this.state.book.series? (\n                            <div>Series: Yes</div>\n                        ):(\n                            <div>Series: No</div>\n                        )}\n                        {this.state.book.best_seller? (\n                            <div>Best Seller: Yes </div>\n                        ):(\n                            <div>Best Seller: No</div>\n                        )}\n                        {this.state.book.triggers? (\n                            <div>Trigger Warnings: {this.state.book.triggers} </div>\n                        ):(\n                            <div>Trigger Warnings: No</div>\n                        )}\n                        \n                        <div>Buy Here: {this.state.book.buy}</div>\n                        <div class=\"text-center\"> Synopsis: {this.state.book.synopsis}</div> */}\n                    </div>\n                )}\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <Footer/>\n                \n            </div>  \n            </body>\n        );\n    }\n}","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/genre/genre.js",["199","200","201","202","203"],"import React, { Component } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport \"./genre.css\"\nimport books from \"../../testData/data\"\nimport { Footer } from \"../footer\";\n\n\nclass GenreRecs extends Component {\n    constructor() {\n        super();\n        this.state = {\n            genres: [\n                { name: \"Cooking\", icon: \"cook1.jpg\" },\n                { name: \"Romance\", icon: \"romance.jpg\" },\n                { name: \"Fantasy\", icon: \"fantasy.jpg\" },\n                { name: \"Adventure\", icon: \"adventure.jpg\" },\n                { name: \"Action\", icon: \"action.jpg\" },\n                { name: \"Detective\", icon: \"detect.jpg\" },\n            ],\n            recommendations: [],\n            showicons: false,\n            icon: \"\",\n            name:\"\",\n        };\n    };\n\n    //when a button is clicked, it is going to send a request to server to get the data\n    //and when we get the data back, we would be able to put that in the recommendation array\n    //the get request will get data specific for that genre\n    //data is the array of all the book recommendation\n    //the data that we get back is json data\n\n\n    handler = (genre) => {\n        //this is to request data from the server\n           fetch(`http://localhost:5000/home/${genre.name}`)\n           .then(response=>response.json()) //converts to js. has the parsed data from the server and that becomes the parameter for the next .then\n           .then(data=>{\n               this.setState({\n                   recommendations:data, //data is response.json\n                   showicons: true,\n                   icon: genre.icon,\n                   name: genre.name,\n               })\n           })\n\n        //this using dummy data incase there is no server. Use this when not connnected to the server.\n        /*\n        const recs = books.filter(book => book.genre === genre.name)\n        this.setState({\n            recommendations: recs,\n            showicons: true,\n            icon: genre.icon,\n            name: genre.name,\n        })\n        */\n    }\n\n    render() {\n\n        return (\n            <div className=\"genre-container\" >\n                {\n                    this.state.showicons && (\n                        <div className=\"icons\">\n                            <img className=\"icon\" src={`${process.env.PUBLIC_URL}/img/${this.state.icon}`} alt={this.state.icon} />\n                            <h1 className=\"font\">{this.state.name}</h1>\n                            <img className=\"icon\" src={`${process.env.PUBLIC_URL}/img/${this.state.icon}`} alt={this.state.icon} />\n                        </div>\n                    )\n                }\n\n                <div className=\"buttons\">\n                    {this.state.genres.map(genre => (\n                        <button type=\"button\" key={genre.name} onClick={() => this.handler(genre)} className=\"right\" variant=\"warning\" size=\"lg\">\n                            {genre.name}\n                        </button>\n                    ))}\n\n                </div>\n                <div className=\"recs mt-4\">\n                    {\n                        this.state.recommendations.map(rec => (\n                            <div key={rec.book_name} className=\"book-card\">\n                                <h2> Title: {rec.book_name}</h2>\n                                <h2> Author: {rec.author}</h2>\n                                <h2> Rating: {rec.rating}</h2>\n                                <h2> Age Range: {rec.age_range}</h2>\n                                <h2> Page: {rec.maximum_pages}</h2>\n                                <h2> Publication Date: {rec.publication_date}</h2>\n                                <h2> Best Seller: {rec.best_seller}</h2>\n                                <h2>Series: {rec.series}</h2>\n                                <h2><a href={rec.LinkToAmazon} target=\"_blank\"> Purchase Link</a> </h2>\n                                <img src={rec.PictureLink} height={300} witdth={300} />\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GenreRecs;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/testData/data.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/tobereadlistings.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/deletetobereadentry.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/addtobereadentry.js",["204","205"],"import React, { Component } from \"react\";\nimport SearchBar from \"../searchbar\";\n\nconst usr = JSON.parse(localStorage.getItem('current_user'));\nconst url = `/rest/submit/${usr}`;\n\nclass AddEntry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      user: usr,\n    };\n    this.update_title = this.update_title.bind(this);\n  }\n\n   update_title(newdata) {\n      this.setState({ title: newdata}, ()=>{\n      //console.log(this.state.title);\n    })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n  \n    fetch(url , {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n          title: this.state.title,\n    \n      })\n    }).then(response => {\n\n            if (response.status === 406) \n            {\n            alert(\"That book already exist in your bookshelf\");\n            }\n\n            else if (response.status === 400) \n            {\n              alert(\"You already read that book, its in your history table\")\n            }\n\n            else if (response.status === 201)\n            {\n              window.location.reload(false);\n            }\n            })\n           .catch(function(error) {\n            \n                alert(error);\n            });\n  };\n\n  render() {\n    const { title, user } = this.state;\n    return (\n      <div>\n        <br />\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            fontFamily: 'Courier New',\n            fontSize: '25px'\n          }}\n        >\n          My Bookshelves\n        </div>\n        <br />\n        <form onSubmit={this.submitHandler}>\n          <div>\n            <div style={{paddingLeft:'200px'}}>\n               <SearchBar data={this.state.title} update_title={this.update_title}/>\n            </div>\n            <div>\n              <br/>\n              <button style={{backgroundColor:\"steelBlue\", color:'white', fontFamily: 'Courier New',width:'450px', height:'40px'}} type=\"submit\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </form>\n        <br/>\n        <div style={{fontFamily: 'Courier New',fontSize: '25px'}}>To Be Read</div>\n      </div>\n    );\n  }\n}\n\nexport default AddEntry;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/searchbar.js",["206","207"],"import React, { Component, Fragment } from 'react';\nimport Select from 'react-select';\nimport axios from 'axios'\n\n\n/*\nconst urlAddEntry = \"http://localhost:5000/getbook\";\n//const urlAlreadyRead = \"http://localhost:8080/{usr}/alreadyRead\";\nconst options = [\n  { value: 'Live Love Laugh', label: 'Harry Potter and the Chamber of Secrets by J.K. Rowling' },\n  { value: 'Hills', label: 'Harry Potter and the Order of Phenoix by J.K. Rowling' },\n  { value: 'Percy', label: 'Percy Jackson and the Lightning Theif by Rick Riordin' },\n  { value: 'The Rose Code by Vanessa Michel', label: 'The Rose Code by Vanessa Michel'},\n  { value: 'The Labyrinth by Elle Werson', label: 'The Labyrinth by Elle Werson'},\n  { value: 'Abrinthine by H.R Wells', label: 'Abrinthine by H.R Wells'}\n];\n*/\nexport default class SearchBar extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      selectOptions : [],\n      book_name: \"\",\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  \n  handleChange = (e) => {\n      this.setState({ book_name: e.target.value });\n      this.props.update_title(e.target.value);\n  }\n\n async getOptions(){\n   //axios.defaults.withCredentials = true;\n    const res = await axios.get('http://localhost:5000/getbook');\n    const data = res.data\n    const options = data.map(d => ({\n      \"value\" : d.book_name,\n      \"label\" : d.book_name\n\n    }))\n    this.setState({selectOptions: options})\n  }\n\n  componentDidMount(){\n      this.getOptions()\n  }\n\n\n  render() {  \n    //console.log(this.state.book_name);  \n    return (\n      <div style={{justifyContent:'center',width:'510px', backgroundColor:'gray'}}>\n        \n          <select value={this.state.book_name} onChange={this.handleChange}>\n        {this.state.selectOptions.map(function(data, key){  return (\n          <option key={key} value={data.key}>{data.value}</option> \n          )\n        })}\n          </select>    \n      </div>\n    )\n  }\n}\n//https://react-select.com/home\n//https://github.com/JedWatson/react-select\n\n/*\n <Select options={this.state.selectOptions} />\n*/","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/forgot.js",["208"],"import React, { Component } from \"react\";\nimport { Footer } from \"./footer\";\n\n\n\nconst appStyle = {\n    height: '250px',\n    display: 'flex'\n};\n\nconst formStyle = {\n    margin: 'auto',\n    padding: '10px',\n    borderRadius: '5px',\n    background: '#ebd0b9',\n    width: '400px',\n    display: 'block'\n};\n\nconst labelStyle = {\n    margin: '10px 0 5px 0',\n    fontFamily: 'Arial, Helvetica, sans-serif',\n    fontSize: '15px',\n};\n\nconst inputStyle = {\n    margin: '5px 0 10px 0',\n    padding: '0px', \n    border: '1px solid #bfbfbf',\n    borderRadius: '0px',\n    boxSizing: 'border-box',\n    width: '100%'\n};\n\nconst submitStyle = {\n    margin: '10px 0 0 0',\n    padding: '7px 7px',\n    border: '1px solid #efffff',\n    borderRadius: '3px',\n    background: '#aaa',\n    width: '100%', \n    fontSize: '15px',\n    color: 'white',\n    display: 'block'\n};\n\nclass forgot extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: \"\",\n            favoriteTeacher: \"\",\n            New_password: \"\",\n            New_passwordConfirm: \"\",\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n\n    }\n\n    handleForgotPassword = (e) => {\n        e.preventDefault();\n        \n\n        fetch('/forgot', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                favoriteTeacher: this.state.favoriteTeacher,\n                New_password: this.state.New_password,\n                New_passwordConfirm: this.state.New_passwordConfirm,\n\n    })\n        }).then(response => {\n            if (response.status ===406)\n            {\n                alert(\"New_Password & New_passwordConfirm needs to match\");\n            }\n            else if (response.status === 400)\n            {\n                alert(\"Can not leave any of the field blank\");\n            }\n\n            else if (response.status === 416)\n            {\n                alert(\"Password and Confirm password has to be atleast Seven characters long\");\n            }\n\n            else if (response.status === 404)\n            {\n                alert(\"Incorrect username or security answer\");\n            }\n\n            else if (response.status === 201) {\n            alert(\"Password was updated, please login!!\");\n            //this.props.handleLogin();\n            window.location.href = 'http://localhost:3000/';\n            }\n            })\n            .catch(function(error) {\n            \n                console.log('Request failed', error)\n            });\n    } \n// End of handlesubmit\n\n\n    render() {\n        const username = this.state.username;\n        const favoriteTeacher = this.state.favoriteTeacher;\n        const New_password = this.state.New_password;\n        const New_passwordConfirm = this.state.New_passwordConfirm;\n   \n\n     return ( \n    <div>\n     <div style={{padding: 10}}>\n        <div style={appStyle}>\n            <div style={formStyle}>\n            <b>Forgot Password</b>\n            <br/>\n            <br/>\n            <form onSubmit={this.handleForgotPassword}>\n                <table border=\"0\">\n                    <tbody>\n                        <tr>\n                            <td>Username:</td>\n                            <div style={inputStyle}>\n                                <input type=\"username\" name=\"username\" size=\"20\" autocorrect=\"off\" spellcheck=\"false\"\n                                       autocapitalize=\"off\" value={username} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                        <tr>\n                            <td>New Password:</td>\n                            <div style={inputStyle}>\n                                <input type=\"password\" name=\"New_password\" size=\"20\"\n                                       required value={New_password} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                        <tr>\n                            <td>Confirm New Password:</td>\n                            <div style={inputStyle}>\n                                <input type=\"password\" name=\"New_passwordConfirm\" size=\"20\"\n                                       required value={New_passwordConfirm} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                        <tr>\n                            <td>Who is your favorite Teacher:</td>\n                            <div style={inputStyle}>\n                                <input type=\"text\" name=\"favoriteTeacher\" size=\"20\"\n                                       required value={favoriteTeacher} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                    </tbody>\n                </table>\n                <br/>\n                <input style={submitStyle} type=\"submit\" value=\"Submit\"/>\n            </form>\n            <br/>\n             <a href=\"forgotusername\">Forgot your username?</a>\n            <br/>\n            <br/>\n            </div>\n        </div>\n        </div>\n                \n                \n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <Footer/>\n        </div>\n        );\n    }\n}\n\nexport default forgot;\n","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/forgotusername.js",["209","210"],"import React, { Component } from \"react\";\nimport { Footer } from \"./footer\";\n\n\nconst appStyle = {\n    height: '250px',\n    display: 'flex'\n};\n\nconst formStyle = {\n    margin: 'auto',\n    padding: '10px',\n    borderRadius: '5px',\n    background: '#ebd0b9',\n    width: '400px',\n    display: 'block'\n};\n\nconst labelStyle = {\n    margin: '10px 0 5px 0',\n    fontFamily: 'Arial, Helvetica, sans-serif',\n    fontSize: '15px',\n};\n\nconst inputStyle = {\n    margin: '5px 0 10px 0',\n    padding: '0px', \n    border: '1px solid #bfbfbf',\n    borderRadius: '0px',\n    boxSizing: 'border-box',\n    width: '100%'\n};\n\nconst submitStyle = {\n    margin: '10px 0 0 0',\n    padding: '7px 7px',\n    border: '1px solid #efffff',\n    borderRadius: '3px',\n    background: '#aaa',\n    width: '100%', \n    fontSize: '15px',\n    color: 'white',\n    display: 'block'\n};\n\nclass forgotusername extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: \"\",\n            favoriteTeacher: \"\",\n            username: [],\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n\n    }\n\n    handleForgotUsername = (e) => {\n        e.preventDefault();\n        \n\n        fetch('/forgotusername', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: this.state.username,\n                favoriteTeacher: this.state.favoriteTeacher,\n                email: this.state.email,\n\n\n    })\n        }).then(response=>response.json()) //converts to js. has the parsed data from the server and that becomes the parameter for the next .then\n       .then(data=>{\n        this.setState({\n            username:data //data is response.json\n           })\n       })\n    } \n// End of handlesubmit\n\n\n    render() {\n        const username = this.state.username;\n        const favoriteTeacher = this.state.favoriteTeacher;\n        const email = this.state.email;\n   \n\n     return ( \n    <div>\n     <div style={{padding: 10}}>\n        <div style={appStyle}>\n            <div style={formStyle}>\n            <b>Forgot Username</b>\n            <br/>\n            <br/>\n            <form onSubmit={this.handleForgotUsername}>\n                <table border=\"0\">\n                    <tbody>\n                        <tr>\n                            <td>Email:</td>\n                            <div style={inputStyle}>\n                                <input type=\"email\" name=\"email\" size=\"20\" autocorrect=\"off\" spellcheck=\"false\"\n                                       autocapitalize=\"off\" value={email} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                        <tr>\n                            <td>Your Favorite Teacher:</td>\n                            <div style={inputStyle}>\n                                <input type=\"text\" name=\"favoriteTeacher\" size=\"20\"\n                                       required value={favoriteTeacher} onChange={this.handleChange}/>\n                            </div>\n                        </tr>\n                    </tbody>\n                </table>\n                <br/>\n                <input style={submitStyle} type=\"submit\" value=\"Submit\"/>\n            </form>\n            <a href=\"forgot\">Forgot your password?</a>\n    <div className=\"forgot_username\">\n        {\n            this.state.username.map(rec=>(\n                <div key={rec.username}className=\"username\">\n                <h2> Username: {rec.username}</h2>\n                </div>\n            ))\n        }\n    </div>\n            <br/>\n            </div>\n        </div>\n        </div>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <Footer/>\n        </div>\n        );\n    }\n}\n\nexport default forgotusername;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/dashboard.js",["211","212","213","214","215","216","217","218","219","220","221","222","223"],"import React from \"react\";\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport Search from 'react-search'\nimport ToBeRead from \"./toberead/toberead\";\nimport AddEntry from \"./toberead/addtobereadentry\";\nimport GetHistoryTable from \"./toberead/gethistorytable\";\nimport \"./dashboard.css\";\nimport { useParams } from \"react-router-dom\";\nimport { PropTypes } from 'react'\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\"\nimport Typography from \"@mui/material/Typography\"\nimport { styled } from \"@mui/material/styles\"\n// const url = \"http://localhost:3000/search\";\nconst sideBySide = {\n\n}\n////\n\n\nconst Dashboard = () => {\n\n    const [items, setItems] = useState([]);\n    const [updateSuccess, setUpdateSuccess] = useState(false);\n    let userDetails = JSON.parse(localStorage.getItem('current_user'));\n    //console.log(userDetails);\n\n\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n\n\n    const fetchItems = async () => {\n        const data = await fetch('/toptenbooks');\n        const rowData = await data.json();\n        setItems(rowData);\n    };\n  //server needs a route: PUT /books/:bookname\n  //this route should update a book by its book name\n  //be sure that userbookmark table is also updated\n  //request body example: {type: 'like'}\n  //if the type is like, increase the rating\n  //if the type is dislike,decrease the rating\n\n\n    const updateLikes = async (book_name, type) => {\n        console.log(\"we are getting clicked from second list \")\n        try {\n            const response = await fetch(`/books/${book_name}`, {\n                method: 'put',\n                headers: {\n                'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    type: type\n                })\n            })\n            setUpdateSuccess(true)\n        }\n        catch (err) {\n            console.log(\"update likes error\", err)\n        }\n\n    }\n\n    /*\n    const rowData = [\n        {title: \"Love Life\", author: \"Amy Azelia\"},\n        {title: \"The Secret Society\", author: \"Adrien Potter\"},\n        {title: \"Ancient Civilization\", author: \"Gideon Aberforth\"},\n        {title: \"Elite Guardians\", author: \"Loki Odinson\"},\n        {title: \"Love Lives\", author: \"Amy Azelia\"},\n        {title: \"The Secret Societies\", author: \"Adrien Potter\"},\n        {title: \"Ancient Civilizations\", author: \"Gideon Aberforth\"},\n        {title: \"Elite Guardiens\", author: \"Loki Odinson\"},\n        {title: \"Love Lifes\", author: \"Amy Azelia\"},\n        {title: \"The Secret Societies\", author: \"Adrien Potter\"},\n    ];\n    */\n\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumApi, setGridColumnApi] = useState(null);\n    const searchDivStyle = { backgroundColor: \"#dedede\", padding: 10 }\n    const searchStyle = { width: \"40%\", padding: \"10px 20px\", borderRadius: 0, outline: 0, fontSize: \"100%\" }\n\n    function onGridReady(params) {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n\n    }\n    //HTMLToolTip from the mui documentation\n    const HtmlTooltip = styled(({ className, ...props }) => (\n        <Tooltip {...props} classes={{ popper: className }} />\n    ))(({ theme }) => ({\n        [`& .${tooltipClasses.tooltip}`]: {\n            backgroundColor: '#f5f5f9',\n            color: 'rgba(0, 0, 0, 0.87)',\n            maxWidth: 400,\n            width: \"400px\",\n            fontSize: theme.typography.pxToRem(12),\n            border: '1px solid #dadde9',\n        },\n    }));\n//\n\n\n    return (\n\n        <div class=\"container\">\n            <div class=\"one\">\n                <div style={{ paddingBottom: 10, textAlign: 'center', fontSize: 20, fontFamily: 'Courier New' }}> Top Ten!</div>\n                <div className=\"ag-theme-alpine\" style={{ paddingLeft: \"5px\", width: 400}}>\n                    {items.length > 0 && items.map((item) => {\n                        return (\n                            <HtmlTooltip title={\n                                <>\n                                    <Typography color=\"inherit\">\n                                        {item.book_name}\n                                    </Typography>\n                                    <p>\n                                        by {item.author}\n                                    </p>\n                                    <div className=\"thumbs\">\n                                        <i onClick={() => updateLikes(item.book_name, 'like')} class=\"fas fa-thumbs-up\"></i>\n                                        <i onClick={() => updateLikes(item.book_name, 'dislike')} class=\"fas fa-thumbs-down\"></i>\n                                        <span>{item.rating} likes</span>\n                                    </div>\n                                    <p>\n                                        {item.Synopsis}\n                                    </p>\n                                </>\n                            } placement=\"right\">\n                                <img src={item.PictureLink} key={item.id} alt={item.book_name} style={{ height: \"200px\", margin: \"10px\" }} />\n                            </HtmlTooltip>\n\n                        )\n                    })\n\n                    }\n                </div>\n            </div>\n            <div class=\"two\">\n                <AddEntry />\n                <ToBeRead updateSuccess={updateSuccess} updateLikes={updateLikes} />\n                    <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        fontFamily: 'Courier New',\n                        fontSize: '25px'\n                    }}\n                    >\n                        <hr />\n                        <br/>\n                    Reading History \n                    </div>\n                <GetHistoryTable updateSuccess={updateSuccess} updateLikes={updateLikes}/>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Dashboard;\n\n/*\n <AgGridColumn field=\"book_name\"></AgGridColumn>\n<img src={rec.PictureLink}/>\n<AgGridColumn field={<img src={rowData.PictureLink}/>}></AgGridColumn>\n*/","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/toberead.js",["224","225"],"import React, { Component } from \"react\";\nimport SearchBar from \"../searchbar\";\nimport ToBeReadList from \"./tobereadlistings\";\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\"\nimport Typography from \"@mui/material/Typography\"\nimport { styled } from \"@mui/material/styles\"\n\n\n//This is the bookshelf...... This is where we will add user book.\n\nconst usr = JSON.parse(localStorage.getItem('current_user'));\nconst url = `/rest/toberead/${usr}`;\n\nclass ToBeRead extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toberead: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(url, { method: \"GET\" })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          toberead: data,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if(prevProps.updateSuccess !== this.props.updateSuccess )\n    {\n      fetch(url, { method: \"GET\" })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          toberead: data,\n        });\n      });\n    }\n  }\n\n  \n  //HTMLToolTip from the mui documentation\n  HtmlTooltip = styled(({ className, ...props }) => (\n    <Tooltip {...props} classes={{ popper: className }} />\n  ))(({ theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n      backgroundColor: '#f5f5f9',\n      color: 'rgba(0, 0, 0, 0.87)',\n      maxWidth: 400,\n      width: \"400px\",\n      fontSize: theme.typography.pxToRem(12),\n      border: '1px solid #dadde9',\n    },\n  }));\n  render() {\n    //console.log(this.state.articles);\n    return (\n      <div >\n        <div style={{ width: '890px', height: '340px', overflowY: 'scroll' }}>\n          <br />\n          <div className=\"recs mt-44\">\n            {\n              this.state.toberead.map(rec => (\n                <div key={rec.PictureLink} className=\"book-card\">\n                  <this.HtmlTooltip title={\n                    <>\n                      <Typography color=\"inherit\">\n                        {rec.book_name}\n                      </Typography>\n                      <p>\n                        by {rec.author}\n                      </p>\n                      <div className=\"thumbs\">\n                        <i onClick={()=>this.props.updateLikes(rec.book_name, 'like')} class=\"fas fa-thumbs-up\"></i>\n                        <i onClick={()=>this.props.updateLikes(rec.book_name, 'dislike')} class=\"fas fa-thumbs-down\"></i>\n                        <span>{rec.rating} likes</span>\n                      </div>\n                      <p>\n                        {rec.Synopsis}\n                      </p>\n                      <p>\n                        <ToBeReadList toberead={rec.book_name} />\n                      </p>\n                    </>\n                  } placement=\"right\">\n                    <img src={rec.PictureLink} height={300} witdth={210} />\n                  </this.HtmlTooltip>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToBeRead;\n///<ToBeReadList toberead={this.state.toberead} />","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/AboutUs/aboutus.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/AboutUs/card.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/AboutUs/data.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/commentsOld.js",["226","227"],"import React, { PureComponent, useState } from 'react'\nimport data from \"./data.json\"\nimport { CommentSection } from 'react-comments-section'\n\n\nconst CommentsOld = () => {\n   const [comment, setComment] = useState(data)\n   const userId = \"01a\"\n   const avatarUrl = \"https://ui-avatars.com/api/name=Riya&background=random\"\n   const name = \"xyz\"\n   const signinUrl = \"/login\"\n   const signupUrl = \"/signup\"\n   let count = 0\n   comment.map(i => {count+=1; i.replies && i.replies.map(i=> count+=1)} )\n\n   return (\n      <div className=\"commentSection\" style={{fontSize:12}}>\n        <div className=\"header\">{count} Comments</div>\n\n        <CommentSection currentUser={userId && { userId: userId, avatarUrl: avatarUrl, name: name }} commentsArray={comment}\n        setComment={setComment} signinUrl={signinUrl} signupUrl={signupUrl}/>\n     </div>\n   );\n }\n \n export default CommentsOld;",["228","229"],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/userbookhistory.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/gethistorytable.js",["230"],"import React, { Component } from \"react\";\nimport ToBeDeleteFromHistory from \"./tobedeletefromhistory\";\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\"\nimport Typography from \"@mui/material/Typography\"\nimport { styled } from \"@mui/material/styles\"\n\n\n\n//This is the history shelf...... This is where we will add user book.\n\nconst usr = JSON.parse(localStorage.getItem('current_user'));\nconst url = `/rest/historytable/${usr}`\n\nclass GetHistoryTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gethistorytable: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(url, { method: \"GET\" })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n            gethistorytable: data,\n        });\n      });\n  }\n\n\n    //HTMLToolTip from the mui documentation\n  HtmlTooltip = styled(({ className, ...props }) => (\n    <Tooltip {...props} classes={{ popper: className }} />\n  ))(({ theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n      backgroundColor: '#f5f5f9',\n      color: 'rgba(0, 0, 0, 0.87)',\n      maxWidth: 400,\n      width: \"400px\",\n      fontSize: theme.typography.pxToRem(12),\n      border: '1px solid #dadde9',\n    },\n  }));\n\n  render() {\n    //console.log(this.state.articles);\n    return (\n      <div >\n        <div style={{ width: '890px', height: '340px', overflowY: 'scroll' }}>\n          <br />\n          <div className=\"recs mt-44\">\n            {\n              this.state.gethistorytable.map(rec => (\n                <div key={rec.PictureLink} className=\"book-card\">\n                  <this.HtmlTooltip title={\n                    <>\n                      <Typography color=\"inherit\">\n                        {rec.book_name}\n                      </Typography>\n                      <p>\n                        by {rec.author}\n                      </p>\n                        <div className=\"thumbs\">\n                            <i onClick={() => this.props.updateLikes(rec.book_name, 'like')} class=\"fas fa-thumbs-up\"></i>\n                            <i onClick={() => this.props.updateLikes(rec.book_name, 'dislike')} class=\"fas fa-thumbs-down\"></i>\n                            <span>{rec.rating} likes</span>\n                        </div>\n                      <p>\n                        {rec.Synopsis}\n                      </p>\n                      <p>\n                        <ToBeDeleteFromHistory gethistorytable={rec.book_name}/>\n                      </p>\n                    </>\n                  } placement=\"right\">\n                    <img src={rec.PictureLink} height={300} witdth={210} />\n                  </this.HtmlTooltip>\n                </div>\n              ))\n            }\n          </div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n    \nexport default GetHistoryTable;\n\n\n/*\n\ngethistorytable\n <ToBeDeleteFromHistory gethistorytable={this.state.gethistorytable}/>\n*/","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/tobedeletefromhistory.js",["231"],"import React from \"react\";\nimport DeleteSomethingFromHistoryTable from \"./deletesomethingfromhistory\"\nimport { Button } from \"react-bootstrap\";\nimport { render } from \"@testing-library/react\";\nimport { red } from \"@mui/material/colors\";\n\n\nconst ToBeDeleteFromHistory = (gethistorytable) => {\n\n  function handleDelete(title) {\n    render(\n      <div>\n        <DeleteSomethingFromHistoryTable title={title} />\n      </div>\n    );\n  }\n\n  const renderList = ({ gethistorytable }) => {\n    if (gethistorytable) {\n    \n        return (\n          <div className=\"bookshelfdelete\"> \n              <span><Button onClick={() => handleDelete(gethistorytable)}>\n                Delete Book\n              </Button> </span>\n              {/* <Button onClick={() => handleUpvote(data.upvote)}>Upvote</Button> */}\n          </div>\n        );\n      \n    }\n  };\n\n  return (\n    <div>\n      <div className=\"bookshelfentry\">{renderList(gethistorytable)}</div>\n    </div>\n  );\n};\n\nexport default ToBeDeleteFromHistory;\n","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/dashboard/toberead/deletesomethingfromhistory.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/blogmain.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/posts/posts.js",["232"],"import React, { Component } from \"react\";\nimport PostEntries from \"./PostEntries\";\nimport AddEntry from \"./AddEntry\";\n\nconst url = \"localhost:5000/posts\"; \n\nclass Posts extends Component {\n  constructor() {\n    super();\n    this.state = { posts: \"\" };\n  }\n  componentDidMount() {\n    fetch(\"http://localhost:5000/posts\", { method: \"GET\" })\n      .then((response) => response.json())\n      .then((data) => { this.setState({ posts: data }); });\n  }\n  render() {\n    return (\n      <div>\n        <br/>\n        <br/>\n        <img style={{width:'650px',height:'150px'}} alt=\"blog posts logo\" src=\"/img/postsintro.png\"/>\n        <PostEntries postEntries={this.state.posts} />\n        <br/>\n        <AddEntry/>\n      </div>\n    );\n  }\n}\n\nexport default Posts;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/posts/PostEntries.js",["233"],"import React from \"react\";\nimport \"./PostEntries.css\";\nimport { Button } from \"react-bootstrap\";\nimport Comments from \"../Comments/comments\";\nimport Popup from \"reactjs-popup\";\n\nconst PostEntries = (postEntries) => {\n\n  const renderList = ({ postEntries }) => {\n    if (postEntries) {\n      return postEntries.map((data) => {\n        return (\n            <div style={{ marginLeft: '10%', marginTop: '40px', width: '80%', height: '35%'}}> \n                <div style={{textAlign:'left', paddingLeft:'5%', color:'black', fontSize:'35px',fontFamily: \"Lucida Console\"}}>\n                      {data.title}\n                </div>\n                <img \n                    style={{width:'90%', height:'10%', paddingTop:'20px', paddingLeft:'0px'}}\n                    src={data.articleimagelink}\n                />\n                <div style={{textAlign:'left', paddingLeft:'70px', color:'black', fontSize:'17px',fontFamily: \"Lucida Console\"}}>Written by {data.author}, Posted on {data.postTime}</div>\n                <br/>\n                <div style = {{textAlign:\"left\", fontSize:'20px', paddingLeft: '70px',paddingRight:'50px',paddingBottom:'40px'}}>\n                    {data.description} \n                    <a href={data.link}>Link</a>\n                    <div>\n                        <Popup\n                          trigger={<Button style={{width:'100px', height:'40px', borderRadius:'0px'}}> Comments </Button>}\n                          position=\"center\"\n                          modal\n                          nested\n                        >\n                          <div style={{ paddingLeft: \"0%\", top: \"0%\", width: \"900px\", height: \"900px\", backgroundColor: \"#ebeff0\", borderRadius: '15px', padding: '40px', overflowY:'scroll'}}>\n                            <Comments title={data.title} />\n                          </div>\n                        </Popup>\n                    </div>\n                </div>\n            \n          </div>\n        );\n      });\n    }\n  };\n\n  return (\n    <div>\n      <div>{renderList(postEntries)}</div>\n    </div>\n  );\n};\n\nexport default PostEntries;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/Comments/comments.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/Comments/CommentEntries.js",["234"],"import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PostComment from \"./PostComment\";\n\nconst CommentEntries = ({commentEntries, postTitle}) => {\n\n  const renderList = () => {\n    if (commentEntries) {\n      return commentEntries.map((data) => {\n        return (\n          <div style={{ paddingLeft: \"0%\", top: \"0%\", width: \"100%\", height: \"100%\", backgroundColor: \"#ebeff0\"}}>\n              <div style={{width: \"820px\", height: \"70px\", backgroundColor: \"#c8e6e1\", borderRadius: '15px', padding: '10px'}}>\n                  <div style={{display:'flex'}}>\n                  <div>\n                      <img alt=\"person icon\" src=\"/img/commentIcon.png\" width=\"50px\" height=\"50px\"/>\n                  </div>\n                  <div style={{paddingLeft:'10px'}}>\n                  @{data.username} \n                  <div>{data.comment}</div>\n                  </div>\n                  </div>\n              </div>\n              <br/>\n          </div>\n        );\n      });\n    }\n  };\n\n  return (\n    <div >\n      <div>\n        {renderList(commentEntries)}\n        <div>\n          <PostComment postTitle = { postTitle }/>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CommentEntries;","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/Comments/PostComment.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/footer.js",[],"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/blog/posts/AddEntry.js",["235","236"],"import React, { Component } from \"react\";\n\nconst url = `/rest/submit/userpost`\nclass AddEntry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: \"\",\n            imgLink: \"\",\n            author: \"\",\n            body: \"\",\n            link: \"\",\n            dataAndTime: \"\",\n        };\n    }\n\n    changeHandler = (e) => { \n      this.setState({ [e.target.name]: e.target.value }); \n    };\n\n    // Im not sure why it does not work. i can figure it out buy why should I, I already have something that works...\n    /// work smarter, not harder\n    /*\n    submitHandler = (e) => {\n        e.preventDefault();\n        var formData = new FormData();\n\n        console.log(\"state: \", this.state);\n\n        formData.append(\"title\", this.state.title);\n        formData.append(\"imgLink\", this.state.imgLink);\n        formData.append(\"author\", this.state.author);\n        formData.append(\"body\", this.state.body);\n        formData.append(\"link\", this.state.link);\n\n        fetch(url, {method: \"POST\", headers: {\n                'Content-Type': 'application/json'\n                }, body: JSON.stringify(formData)})\n        .then((response) => {response.json();})\n        .catch((error) => {console.log(\"Error: \", error);})\n        .then((response) => console.log(\"Success: \", JSON.stringify(response)));\n\n        this.setState({ title:\"\", imgLink:\"\", author:\"\", body:\"\", link:\"\" });\n\n    };\n\n    */\n\n       submitHandler = (e) => {\n        e.preventDefault();\n        const timestamp = Date.now();\n        const curren_time = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit'}).format(timestamp);\n        console.log(curren_time);\n\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                title: this.state.title,\n                imgLink: this.state.imgLink,\n                author: this.state.author,\n                body: this.state.body,\n                link: this.state.link,\n                dataAndTime: curren_time\n\n            })\n        }).then(response => {\n\n            if (response.status === 404) {\n            alert(\"Unfortunately, We could not add the post\");\n            \n            }\n            else if (response.status === 201)\n            {\n                window.location.reload(false);\n            }\n            })\n           .catch(function(error) {\n            \n                alert(error);\n            });\n        \n        }\n\n\n    render() {\n        const { title, imgLink, author, body, link, dataAndTime } = this.state;\n        return (\n        <div style={{ backgroundColor:'LightGray', paddingLeft:'0px',paddingBottom:'50px',paddingRight:'50px',paddingTop:'50px'}}> \n\n            <div style={{backgroundColor:'white', padding: '5%', width: '105%', height: '35%', display: 'flex'}}>\n            <div>\n                <img  style={{paddingLeft:'0px',width:'700px', height:'550px',}} src=\"https://qph.fs.quoracdn.net/main-qimg-6f1750c47e1fe3f5b49f933b90711f6e-lq\"/>\n            </div>\n            <div>\n            <div style={{textAlign:'center', paddingLeft:'10px', paddingTop:'20px', color:'black', fontSize:'30px',fontFamily: \"Lucida Console\"}}>\n                Add a Post\n            </div>\n            <br/>\n            <form onSubmit={this.submitHandler}>  \n            <div style={{paddingTop:'10px'}}>  \n                <div style={{paddingLeft:'20px'}}>\n                    <div style={{fontSize:'20px',fontFamily: \"Lucida Console\"}}>\n                        Title of Article&nbsp;&nbsp;  \n                        <input type=\"text\" style={{height: '40px', width: '550px'}} name=\"title\" value={title} onChange={this.changeHandler}/>\n                    </div>\n                </div>\n                <br/>\n                <div style={{paddingLeft:'20px'}}>\n                    <div style={{fontSize:'20px',fontFamily: \"Lucida Console\"}}>\n                        Article Image Link&nbsp;&nbsp;\n                        <input type=\"text\" style={{height: '40px', width: '550px'}} name=\"imgLink\" value={imgLink} onChange={this.changeHandler}/>\n                    </div>\n                </div>\n                <br/>\n                <div style={{paddingLeft:'20px'}}>\n                    <div style={{fontSize:'20px',fontFamily: \"Lucida Console\"}}>\n                        Author of the Article&nbsp;&nbsp;\n                        <input type=\"text\" style={{height: '40px', width: '550px'}} name=\"author\" value={author} onChange={this.changeHandler}/>\n                    </div>\n                </div>\n                <br/>\n                <div style={{paddingLeft:'20px'}}>\n                    <div style={{fontSize:'20px',fontFamily: \"Lucida Console\"}}>\n                        Article Body&nbsp;&nbsp;\n                        <input type=\"text\"style={{height: '40px', width: '550px'}}  name=\"body\" value={body} onChange={this.changeHandler}/>\n                    </div>\n                </div>\n                <br/>\n                <div style={{paddingLeft:'20px'}}>\n                    <div style={{fontSize:'20px',fontFamily: \"Lucida Console\"}}>\n                        Article Link&nbsp;&nbsp;\n                        <input type=\"text\" style={{height: '40px', width: '550px'}} name=\"link\" value={link} onChange={this.changeHandler}/>\n                    </div>\n                </div>\n                <br/>\n                \n                <button type=\"submit\" style={{width:'200px', height:'50px', backgroundColor:'darkgrey', border:'none'}}>\n                    <div style={{fontSize:'20px',fontFamily: \"Lucida Console\"}}>Submit</div>\n                </button>\n            </div>\n            </form>\n            </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default AddEntry;\n","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/NYTbooks/nytbooks.js",["237","238","239","240","241"],"import React, { Component } from \"react\";\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\"\nimport Typography from \"@mui/material/Typography\"\nimport { styled } from \"@mui/material/styles\"\nimport FlipCard from \"./FlipCard\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.scss\";\n\nconst url = `https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=33NLEoCDgzVw5HKW9HmijOZ3DBWBBEHo`;\n\nexport default class nytbooks extends React.Component{\n    state = {\n        loading:true,\n        res: [],\n    };\n    async componentDidMount() {\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({ res: data.results.books, loading: false});\n        \n\n    }\n    render(){\n    return (\n    <div className=\"container\">\n      <div className=\"row h-100\">\n        <div class=\"col d-flex flex-column flex-md-row justify-content-around align-items-center\">\n          {this.state.res.slice(0, 4).map((rec) => (\n            <FlipCard key={rec.id} card={rec} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n}\n}","/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/NYTbooks/FlipCard.js",[],{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":5,"column":8,"nodeType":"248","messageId":"249","endLine":5,"endColumn":16},{"ruleId":"246","severity":1,"message":"250","line":18,"column":10,"nodeType":"248","messageId":"249","endLine":18,"endColumn":19},{"ruleId":"246","severity":1,"message":"251","line":21,"column":7,"nodeType":"248","messageId":"249","endLine":21,"endColumn":17},{"ruleId":"246","severity":1,"message":"252","line":27,"column":7,"nodeType":"248","messageId":"249","endLine":27,"endColumn":17},{"ruleId":"246","severity":1,"message":"253","line":126,"column":15,"nodeType":"248","messageId":"249","endLine":126,"endColumn":23},{"ruleId":"246","severity":1,"message":"254","line":127,"column":15,"nodeType":"248","messageId":"249","endLine":127,"endColumn":23},{"ruleId":"246","severity":1,"message":"255","line":128,"column":15,"nodeType":"248","messageId":"249","endLine":128,"endColumn":30},{"ruleId":"246","severity":1,"message":"256","line":129,"column":15,"nodeType":"248","messageId":"249","endLine":129,"endColumn":30},{"ruleId":"246","severity":1,"message":"257","line":130,"column":15,"nodeType":"248","messageId":"249","endLine":130,"endColumn":20},{"ruleId":"258","severity":1,"message":"259","line":492,"column":25,"nodeType":"260","endLine":492,"endColumn":92},{"ruleId":"261","severity":1,"message":"262","line":520,"column":25,"nodeType":"260","messageId":"263","endLine":520,"endColumn":80,"fix":"264"},{"ruleId":"246","severity":1,"message":"265","line":64,"column":12,"nodeType":"248","messageId":"249","endLine":64,"endColumn":24},{"ruleId":"246","severity":1,"message":"250","line":2,"column":10,"nodeType":"248","messageId":"249","endLine":2,"endColumn":19},{"ruleId":"246","severity":1,"message":"251","line":22,"column":7,"nodeType":"248","messageId":"249","endLine":22,"endColumn":17},{"ruleId":"258","severity":1,"message":"259","line":28,"column":25,"nodeType":"260","endLine":28,"endColumn":92},{"ruleId":"261","severity":1,"message":"262","line":56,"column":25,"nodeType":"260","messageId":"263","endLine":56,"endColumn":80,"fix":"266"},{"ruleId":"246","severity":1,"message":"267","line":2,"column":8,"nodeType":"248","messageId":"249","endLine":2,"endColumn":14},{"ruleId":"246","severity":1,"message":"268","line":4,"column":8,"nodeType":"248","messageId":"249","endLine":4,"endColumn":13},{"ruleId":"246","severity":1,"message":"269","line":5,"column":10,"nodeType":"248","messageId":"249","endLine":5,"endColumn":16},{"ruleId":"261","severity":1,"message":"262","line":93,"column":37,"nodeType":"260","messageId":"263","endLine":93,"endColumn":80,"fix":"270"},{"ruleId":"258","severity":1,"message":"259","line":94,"column":33,"nodeType":"260","endLine":94,"endColumn":88},{"ruleId":"246","severity":1,"message":"271","line":59,"column":13,"nodeType":"248","messageId":"249","endLine":59,"endColumn":18},{"ruleId":"246","severity":1,"message":"272","line":59,"column":20,"nodeType":"248","messageId":"249","endLine":59,"endColumn":24},{"ruleId":"246","severity":1,"message":"273","line":1,"column":28,"nodeType":"248","messageId":"249","endLine":1,"endColumn":36},{"ruleId":"246","severity":1,"message":"274","line":2,"column":8,"nodeType":"248","messageId":"249","endLine":2,"endColumn":14},{"ruleId":"246","severity":1,"message":"251","line":20,"column":7,"nodeType":"248","messageId":"249","endLine":20,"endColumn":17},{"ruleId":"246","severity":1,"message":"251","line":19,"column":7,"nodeType":"248","messageId":"249","endLine":19,"endColumn":17},{"ruleId":"246","severity":1,"message":"253","line":88,"column":15,"nodeType":"248","messageId":"249","endLine":88,"endColumn":23},{"ruleId":"246","severity":1,"message":"275","line":4,"column":10,"nodeType":"248","messageId":"249","endLine":4,"endColumn":22},{"ruleId":"246","severity":1,"message":"276","line":4,"column":24,"nodeType":"248","messageId":"249","endLine":4,"endColumn":35},{"ruleId":"246","severity":1,"message":"277","line":7,"column":8,"nodeType":"248","messageId":"249","endLine":7,"endColumn":14},{"ruleId":"246","severity":1,"message":"278","line":12,"column":10,"nodeType":"248","messageId":"249","endLine":12,"endColumn":19},{"ruleId":"246","severity":1,"message":"250","line":13,"column":10,"nodeType":"248","messageId":"249","endLine":13,"endColumn":19},{"ruleId":"246","severity":1,"message":"279","line":18,"column":7,"nodeType":"248","messageId":"249","endLine":18,"endColumn":17},{"ruleId":"246","severity":1,"message":"280","line":28,"column":9,"nodeType":"248","messageId":"249","endLine":28,"endColumn":20},{"ruleId":"246","severity":1,"message":"281","line":55,"column":19,"nodeType":"248","messageId":"249","endLine":55,"endColumn":27},{"ruleId":"246","severity":1,"message":"282","line":87,"column":12,"nodeType":"248","messageId":"249","endLine":87,"endColumn":19},{"ruleId":"246","severity":1,"message":"265","line":88,"column":12,"nodeType":"248","messageId":"249","endLine":88,"endColumn":24},{"ruleId":"246","severity":1,"message":"283","line":89,"column":11,"nodeType":"248","messageId":"249","endLine":89,"endColumn":25},{"ruleId":"246","severity":1,"message":"284","line":90,"column":11,"nodeType":"248","messageId":"249","endLine":90,"endColumn":22},{"ruleId":"246","severity":1,"message":"285","line":92,"column":14,"nodeType":"248","messageId":"249","endLine":92,"endColumn":25},{"ruleId":"246","severity":1,"message":"286","line":2,"column":8,"nodeType":"248","messageId":"249","endLine":2,"endColumn":17},{"ruleId":"258","severity":1,"message":"259","line":90,"column":21,"nodeType":"260","endLine":90,"endColumn":76},{"ruleId":"246","severity":1,"message":"287","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":30},{"ruleId":"288","severity":1,"message":"289","line":14,"column":18,"nodeType":"290","messageId":"291","endLine":14,"endColumn":20},{"ruleId":"242","replacedBy":"292"},{"ruleId":"244","replacedBy":"293"},{"ruleId":"258","severity":1,"message":"259","line":78,"column":21,"nodeType":"260","endLine":78,"endColumn":76},{"ruleId":"246","severity":1,"message":"294","line":5,"column":10,"nodeType":"248","messageId":"249","endLine":5,"endColumn":13},{"ruleId":"246","severity":1,"message":"295","line":5,"column":7,"nodeType":"248","messageId":"249","endLine":5,"endColumn":10},{"ruleId":"258","severity":1,"message":"259","line":17,"column":17,"nodeType":"260","endLine":20,"endColumn":19},{"ruleId":"246","severity":1,"message":"267","line":2,"column":10,"nodeType":"248","messageId":"249","endLine":2,"endColumn":16},{"ruleId":"246","severity":1,"message":"296","line":89,"column":53,"nodeType":"248","messageId":"249","endLine":89,"endColumn":64},{"ruleId":"258","severity":1,"message":"259","line":95,"column":17,"nodeType":"260","endLine":95,"endColumn":163},{"ruleId":"246","severity":1,"message":"297","line":1,"column":17,"nodeType":"248","messageId":"249","endLine":1,"endColumn":26},{"ruleId":"246","severity":1,"message":"298","line":2,"column":8,"nodeType":"248","messageId":"249","endLine":2,"endColumn":15},{"ruleId":"246","severity":1,"message":"299","line":2,"column":19,"nodeType":"248","messageId":"249","endLine":2,"endColumn":33},{"ruleId":"246","severity":1,"message":"300","line":3,"column":8,"nodeType":"248","messageId":"249","endLine":3,"endColumn":18},{"ruleId":"246","severity":1,"message":"301","line":4,"column":10,"nodeType":"248","messageId":"249","endLine":4,"endColumn":16},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"no-unused-vars","'Notfound' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'labelStyle' is assigned a value but never used.","'inputStyle' is assigned a value but never used.","'username' is assigned a value but never used.","'password' is assigned a value but never used.","'Confirmpassword' is assigned a value but never used.","'favoriteTeacher' is assigned a value but never used.","'email' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"304","text":"305"},"'gridColumApi' is assigned a value but never used.",{"range":"306","text":"305"},"'Button' is defined but never used.","'books' is defined but never used.","'Footer' is defined but never used.",{"range":"307","text":"305"},"'title' is assigned a value but never used.","'user' is assigned a value but never used.","'Fragment' is defined but never used.","'Select' is defined but never used.","'AgGridColumn' is defined but never used.","'AgGridReact' is defined but never used.","'Search' is defined but never used.","'useParams' is defined but never used.","'sideBySide' is assigned a value but never used.","'userDetails' is assigned a value but never used.","'response' is assigned a value but never used.","'gridApi' is assigned a value but never used.","'searchDivStyle' is assigned a value but never used.","'searchStyle' is assigned a value but never used.","'onGridReady' is defined but never used.","'SearchBar' is defined but never used.","'PureComponent' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["302"],["303"],"'red' is defined but never used.","'url' is assigned a value but never used.","'dataAndTime' is assigned a value but never used.","'Component' is defined but never used.","'Tooltip' is defined but never used.","'tooltipClasses' is defined but never used.","'Typography' is defined but never used.","'styled' is defined but never used.","no-global-assign","no-unsafe-negation",[35992,35992]," rel=\"noreferrer\"",[2655,2655],[3842,3842]]